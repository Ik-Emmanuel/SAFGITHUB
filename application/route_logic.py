import pyodbc
import datetime
# from datetime import datetime
from collections import Counter


class SRMS(object):
    def __init__(self):
        self.table = "stage.dimcustomer_image"
        self.database = 'FraudSolutionDBExt'
        self.dsn = "Driver={ODBC Driver 17 for SQL Server};Server=tcp:businessinsight.database.windows.net,1433;Database=FraudSolutionDBExt;Uid=edouser;Pwd=data18@@$$;Encrypt=yes;TrustServerCertificate=yes;Connection Timeout=0;autocommit=True;"
        self.connection = None
        self.today = datetime.date.today()
        # print(f"'today': {self.today}")
        self.yesterday = self.today - datetime.timedelta(days=1)
        self.yesterday = str(self.yesterday) + '11:59:00.000'
        self.cursor = None
        self.conn = None
        self.brand_performance = None
        self.result = None

    def database_connection(self):
        try:
            self.conn = pyodbc.connect(self.dsn)
            self.cursor = self.conn.cursor()
            self.connection = True
            result = self.connection
            print(f"connected to {self.database}")
        except Exception as e:
            print(str(e))
            print(f"couldn't connect to {self.database}, error: {str(e)}")
            self.connection = False
            result = self.connection

        return result

    def close_database_connection(self):
        try:
            if self.connection:
                self.cursor.close()
                self.conn.close()
                print(f"connection to {self.database} closed")
            else:
                print(f"{self.database} not connected")
        except Exception as e:
            print(str(e))
            print('error occurred while closing connection')

    def feedback(self, name, email, need, message):
        try:
            print(f"saving Feedback")
            table = "[dbo].[SAF_feedback_log]"

            data = {
                    "Name": name,
                    "Sender": email,
                    "Recipient": "biworkspace@sterling.ng",
                    "Reason": need,
                    "Message": message,
                    "DateLoaded": str(datetime.datetime.now())
                    }

            # print(f"data: {data}")

            ins_qry = "SET QUOTED_IDENTIFIER OFF\
                                               SET ANSI_NULLS ON \
                                               INSERT INTO {tablename} ({columns}) VALUES {values};".format(
                tablename=table,
                columns=', '.join(data.keys()),
                values=tuple(data.values())
            )
            # print(ins_qry)
            self.cursor.execute(ins_qry)
            self.conn.commit()
            self.close_database_connection()

            response = [True, "Your Feedback has been sent."]
        except Exception as e:
            print(str(e))
            response = [False, "Oops something went wrong, please try again."]

        return response

    def brand(self):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                            select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, \
                            Text as post, Likes, comments,Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFfacebooksentiment where Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                            where Date = CAST (GETDATE() AS DATE) union all \
                            select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes,\
                            Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFinstagramsentiment \
                            where Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date\
                            from sa.RefreshedSAFinstagramcommentsentiment where Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%alt%' and Date = CAST (GETDATE() AS DATE)) as e"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Date': str(return_value[i][8])
                                }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"

                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    # data["drop_down_emojie"]
                    # data["Sentiment_emojie"]
                    # data["drop_down"]
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Alternative Finance",
                                  "Post": "No post directed at Sterling Alternative Finance so far on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                    # output = {"post": post_data}
                    # result = post_data

                query2 = f"select count(*) from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where Date = CAST (GETDATE() AS DATE)  union all\
                                                select isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFinstagramsentiment where Date = CAST (GETDATE() AS DATE)  union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where Date = CAST (GETDATE() AS DATE)  union all\
                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                like '%alt%' and Date = CAST (GETDATE() AS DATE)) as e"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%alt%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive') as e union\
                            select count(Instagram_Post) as sentiment from sa.RefreshedSAFinstagramsentiment where Date = CAST (GETDATE() AS DATE) ) f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where Sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%alt%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Negative') as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%alt%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Neutral') as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            (select * from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%alt%' and Date = CAST (GETDATE() AS DATE) and [sentiment] = 'Positive') as e\
                            ) as a\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                            as date))) and sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                            where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                            from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                            and comment_sentiment = 'Positive' union all\
                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%alt%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                            group by [sentiment]) a\
                            group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"return_value: {return_value}")
                # return_value = [(26, 'Positive')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Positive_%change'] = f"{round(return_value[i][0] * 100, 2)}% increase from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result['Positive_%change'] = f"{abs(round(return_value[i][0] * 100, 2))}% decrease from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                (select * from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Negative' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                like '%alt%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                ) as a\
                                                group by [sentiment]\
                                                union\
                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                as date))) and sentiment = 'Negative' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                                                where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                and comment_sentiment = 'Negative' union all\
                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                like '%alt%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                group by [sentiment]) a\
                                                group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"return_value: {return_value}")
                # return_value = [(29, 'Negative')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Negative_%change'] = f"{round(return_value[i][0] * 100, 2)}% increase from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result['Negative_%change'] = f"{round(abs(return_value[i][0]) * 100, 2)}% decrease from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                (select * from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Neutral' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                like '%alt%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                ) as a\
                                                group by [sentiment]\
                                                union\
                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                as date))) and sentiment = 'Neutral' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                                                where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                and comment_sentiment = 'Neutral' union all\
                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                like '%alt%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                group by [sentiment]) a\
                                                group by [sentiment])a"

                # print('query 8')
                # print(query8)

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"return_value: {return_value}")
                # return_value = [(26, 'Neutral')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result['Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtags, tweet_text, Date from sa.RefreshedSAFtwitterbanksentiment2 where Hashtags != 'None' and Date = CAST(GETDATE() AS DATE) and tweet_text like '%alt%'"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()
                # return_value = [(29, 'Neutral')]

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag

                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def twitterplatform(self):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                like '%alt%' and Date = CAST (GETDATE() AS DATE)) as e"
                # -- and Date = '{self.today}' \

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):

                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/twitter.png",
                                'Date': str(return_value[i][8])
                                }

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg", "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg", "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg", "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                        # print(f"data1: {data}")
                else:
                    post_data = [{"Channel": "Twitter",
                                  "Post": "No tweet directed at Sterling Alternative Finance so far for today....",
                                  'Username': "Sterling Alternative Finance",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/twitter.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select count(*) total_mentions from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%alt%' and Date = CAST (GETDATE() AS DATE)"

                self.cursor.execute(query2)
                return_value = self.cursor.fetchall()

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                    # print(f"total_mentions: {result['total_mentions']}")

                query3 = f"select count(sentiment) as sentiment from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%alt%' and Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                    # print(f"Positve_count: {result['Positve_count']}")

                query4 = f"select count(sentiment) as sentiment from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                            like '%alt%' and Sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                    # print(f"Negative_count: {result['Negative_count']}")

                query5 = f"select count(sentiment) as sentiment from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                            like '%alt%' and Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                    # print(f"Neutral_count: {result['Neutral_count']}")

                        # print('query 7')
                        # print(query7)

                query6 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            sa.RefreshedSAFtwitterbanksentiment2 where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive'\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                            sa.RefreshedSAFtwitterbanksentiment2 where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive'\
                            group by [sentiment])a group by [sentiment]\
                            )a"
                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"positive_return_value: {return_value}")
                # return_value = [(29, 'Positive')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Positive_%change'] = f"{round(return_value[i][0], 2)* 100}% increase from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result['Positive_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            sa.RefreshedSAFtwitterbanksentiment2 where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative'\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                            sa.RefreshedSAFtwitterbanksentiment2 where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative'\
                            group by [sentiment])a group by [sentiment]\
                            )a"
                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # return_value = self.cursor.fetchall()
                # print(f"Negative_return_value: {return_value}")
                # return_value = [(29, 'Negative')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result['Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            sa.RefreshedSAFtwitterbanksentiment2 where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral'\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                            sa.RefreshedSAFtwitterbanksentiment2 where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral'\
                            group by [sentiment])a group by [sentiment]\
                            )a"
                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # return_value = self.cursor.fetchall()
                # print(f"Neutral_return_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result['Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                        # result['Neutral_%change'] = f"{round(abs(return_value[i][0]), 2)}%"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtags from sa.RefreshedSAFtwitterbanksentiment2 where Hashtags != 'None' and tweet_text like '%alt%' and Date = CAST (GETDATE() AS DATE)"
                try:
                    self.cursor.execute(query9)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                result['Post_data'] = post_data
                self.result = result
                self.close_database_connection()
        except Exception as e:
            print(str(e))

        return self.result

    def fbplatform(self):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                            select top 200 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes,\
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFfacebooksentiment where Date = CAST (GETDATE() AS DATE) union all\
                            select top 200 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where Date = CAST (GETDATE() AS DATE)\
                            ) as e\
                            order by Date desc"
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):

                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/facebook.png",
                                'Date': str(return_value[i][8])
                                }

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg", "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg", "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg", "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Facebook",
                                  "Post": "No post directed at sterling Alternative Finance so far on Facebook for today....",
                                  'Username': "Sterling Alternative Finance",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/facebook.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(total_mentions) as counts from (select count(*) total_mentions from sa.RefreshedSAFfacebooksentiment where Date = CAST (GETDATE() AS DATE) union\
                                                                        select count(*) total_mentions from sa.RefreshedSAFfacebookcommentsentiment where Date = CAST (GETDATE() AS DATE)) a"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) counts from (select count(sentiment) as sentiment from sa.RefreshedSAFfacebooksentiment \
                           where Date = CAST (GETDATE() AS DATE) union\
                           select count(sentiment) as sentiment from sa.RefreshedSAFfacebookcommentsentiment where Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from sa.RefreshedSAFfacebookcommentsentiment where Sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from sa.RefreshedSAFfacebookcommentsentiment where Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            (select * from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes,\
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive'\
                            ) as e\
                            ) as a\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                            as date))) and sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment\
                            where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positve'\
                            ) as e\
                            group by [sentiment]) a\
                            group by [sentiment])a"
                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['positive_%change'] = f"{round(return_value[i][0] * 100, 2)}% increase from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result['Positive_%change'] = f"{round(abs(return_value[i][0]) * 100, 2)}% decrease from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            (select * from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes,\
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Negative' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative'\
                            ) as e\
                            ) as a\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                            as date))) and sentiment = 'Negative' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment\
                            where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative'\
                            ) as e\
                            group by [sentiment]) a\
                            group by [sentiment])a"
                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"return_value: {return_value}")
                # return_value = [(29, 'Negative')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Negative_%change'] = f"{round(return_value[i][0] * 100, 2)}% increase from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result['Negative_%change'] = f"{round(abs(return_value[i][0]) * 100, 2)}% decrease from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            (select * from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes,\
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Neutral' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral'\
                            ) as e\
                            ) as a\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                            as date))) and sentiment = 'Neutral' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment\
                            where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral'\
                            ) as e\
                            group by [sentiment]) a\
                            group by [sentiment])a"
                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"return_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        # print(i)
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0] * 100, 2)}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]) * 100, 2)}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                result['Post_data'] = post_data
                self.result = result
                self.close_database_connection()
        except Exception as e:
            print(str(e))

        return self.result

    def igplatform(self):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                                select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFinstagramsentiment where Date = CAST (GETDATE() AS DATE) union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where Date = CAST (GETDATE() AS DATE)\
                              ) e\
                              order by Date desc"
                # -- where Date = '{self.today}' \
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/insta.png",
                                'Date': str(return_value[i][8])
                                }

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg", "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg", "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg", "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Instagram",
                                  "Post": "No post directed at sterling Alternative Finance so far on Instagram for today....",
                                  'Username': "Sterling Alternative Finance",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/insta.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]
                                  }]

                # print(post_data)
                query2 = f"select sum(total_mentions) as counts from (select count(*) total_mentions from sa.RefreshedSAFinstagramsentiment where Date = CAST (GETDATE() AS DATE) union\
                                                                        select count(*) total_mentions from sa.RefreshedSAFinstagramcommentsentiment where Date = CAST (GETDATE() AS DATE)) a"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) counts from (select count(Instagram_Post) as sentiment from sa.RefreshedSAFinstagramsentiment where Date = CAST (GETDATE() AS DATE) union\
                            select count(comment_sentiment) as sentiment from sa.RefreshedSAFinstagramcommentsentiment where Date = CAST (GETDATE() AS DATE)\
                            and comment_sentiment = 'Positive') as e"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(comment_sentiment) as sentiment from sa.RefreshedSAFinstagramcommentsentiment where comment_sentiment = 'Negative and Date = CAST (GETDATE() AS DATE)'                                            "

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(comment_sentiment) as sentiment from sa.RefreshedSAFinstagramcommentsentiment where comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                        # print('query 7')

                query6 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            (select * from(\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes,\
                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                            from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                            and comment_sentiment = 'Positive'\
                            ) as e\
                            ) as a\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from(\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes,\
                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                            from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                            and comment_sentiment = 'Positive'\
                            ) as e\
                            group by [sentiment]) a\
                            group by [sentiment])a"
                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"return_value: {return_value}")
                # return_value = [(29, 'Positive')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result['Positive_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            (select * from(\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes,\
                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                            from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                            and comment_sentiment = 'Negative'\
                            ) as e\
                            ) as a\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from(\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes,\
                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                            from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                            and comment_sentiment = 'Negative'\
                            ) as e\
                            group by [sentiment]) a\
                            group by [sentiment])a"
                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"return_value: {return_value}")
                # return_value = [(29, 'Negative')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result['Negative_%change'] = f"{round(abs(return_value[i][0]), 2) *100}% decrease from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            (select * from(\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes,\
                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                            from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                            and comment_sentiment = 'Neutral'\
                            ) as e\
                            ) as a\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from(\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes,\
                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                            from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                            and comment_sentiment = 'Neutral'\
                            ) as e\
                            group by [sentiment]) a\
                            group by [sentiment])a"
                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"return_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        # print(i)
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                result['Post_data'] = post_data
                self.result = result
                self.close_database_connection()
        except Exception as e:
            print(str(e))

        return self.result

    def brand_daterange(self, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                            select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Date between '{startdate}' and '{enddate}' order by Date desc union all\
                            select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where Date between '{startdate}' and '{enddate}' order by Date desc union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                            Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFinstagramsentiment where Date between '{startdate}' and '{enddate}' order by Date desc union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where Date between '{startdate}' and '{enddate}' order by Date desc union all\
                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%alt%' and Date between '{startdate}' and '{enddate}'\
                            order by Date desc) as e order by Date desc"
                # and \
                # Date = '{self.today}' \
                # print(f"i am here")
                # print(query1)
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Date': str(return_value[i][8])
                                }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"

                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Alternative Finance",
                                  "Post": "No post directed at Sterling Alternative Finance so far on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/neut.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select count(*) from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFinstagramsentiment where Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                like '%alt%' and Date between '{startdate}' and '{enddate}') as e"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                # print(f"done with query 2")

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Date between '{startdate}' and '{enddate}' and Sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where Date between '{startdate}' and '{enddate}' and Sentiment = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where Date between '{startdate}' and '{enddate}' and comment_sentiment = 'Positive' union all\
                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%alt%' and Date between '{startdate}' and '{enddate}' and Sentiment = 'Positive') as e union\
                            select count(Instagram_Post) as sentiment from sa.RefreshedSAFinstagramsentiment) f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                # print(f"done with query 3")

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Date between '{startdate}' and '{enddate}' and Sentiment = 'Negative' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where Date between '{startdate}' and '{enddate}' and Sentiment = 'Negative' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where Date between '{startdate}' and '{enddate}' and comment_sentiment = 'Negative' union all\
                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%alt%' and Date between '{startdate}' and '{enddate}' and Sentiment = 'Negative') as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                # print(f"done with query 4")

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Date between '{startdate}' and '{enddate}' and Sentiment = 'Neutral' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where Date between '{startdate}' and '{enddate}' and Sentiment = 'Neutral' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where Date between '{startdate}' and '{enddate}' and comment_sentiment = 'Neutral' union all\
                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%alt%' and Date between '{startdate}' and '{enddate}' and Sentiment = 'Neutral') as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                # print(f"done with query 5")

                query6 = f"select Hashtags from sa.RefreshedSAFtwitterbanksentiment2 where Date between '{startdate}' and '{enddate}' and tweet_text like '%alt%' and Hashtags != 'None'"
                try:
                    self.cursor.execute(query6)
                except Exception as e:
                    print(str(e))

                # print(f"done with query 6")

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def twitter_daterange(self, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                            select top 200 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%alt%' and Date between '{startdate}' and '{enddate}'\
                            order by Date desc) as e"

                # print(f"query1: {query1}")
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []
                # print(f"query1: {return_value}")

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/twitter.png",
                                'Date': str(return_value[i][8])
                                }

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Alternative Finance",
                                  "Post": f"No post directed at Sterling Alternative Finance between {startdate} and {enddate} on Twitter....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select count(*) total_mentions from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%alt%' and Date between '{startdate}' and '{enddate}'"

                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select count(sentiment) as sentiment from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%alt%' and Date between '{startdate}' and '{enddate}' and Sentiment = 'Positive'"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                    # print(f"Positve_count: {result['Positve_count']}")

                query4 = f"select count(sentiment) as sentiment from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                            like '%alt%' and Date between '{startdate}' and '{enddate}' and Sentiment = 'Negative'"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                    # print(f"Negative_count: {result['Negative_count']}")

                query5 = f"select count(sentiment) as sentiment from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                            like '%alt%' and Date between '{startdate}' and '{enddate}' and Sentiment = 'Neutral'"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select Hashtags from sa.RefreshedSAFtwitterbanksentiment2 where Date between '{startdate}' and '{enddate}' and tweet_text like '%alt%' and Hashtags != 'None'"
                try:
                    self.cursor.execute(query6)
                except Exception as e:
                    print(str(e))

                # print(f"done with query 6")

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace(
                        "'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                result['Post_data'] = post_data
                self.result = result
                self.close_database_connection()
        except Exception as e:
            print(str(e))

        return self.result

    def fb_daterange(self, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                            select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes,\
                            comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFfacebooksentiment where Date between '{startdate}' and '{enddate}' union all\
                            select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment\
                             where Date between '{startdate}' and '{enddate}') as e\
                            order by Date desc"
                # -- where Date = '{self.today}' \
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/facebook.png",
                                'Date': str(return_value[i][8])
                                }

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"

                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Alternative Finance",
                                  "Post": f"No post directed at Sterling Alternative Finance  between {startdate} and {enddate} on Facebook....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/facebook.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(total_mentions) as counts from (select count(*) total_mentions from sa.RefreshedSAFfacebooksentiment where Date between '{startdate}' and '{enddate}' union\
                                                                        select count(*) total_mentions from sa.RefreshedSAFfacebookcommentsentiment where Date between '{startdate}' and '{enddate}') a"

                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) counts from (select count(sentiment) as sentiment from sa.RefreshedSAFfacebooksentiment where Date between '{startdate}' and '{enddate}' union\
                           select count(sentiment) as sentiment from sa.RefreshedSAFfacebookcommentsentiment where Sentiment = 'Positive' and Date between '{startdate}' and '{enddate}') as e"

                # print('query 3')
                self.cursor.execute(query3)
                return_value = self.cursor.fetchall()

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from sa.RefreshedSAFfacebookcommentsentiment where Sentiment = 'Negative' and Date between '{startdate}' and '{enddate}'"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from sa.RefreshedSAFfacebookcommentsentiment where Sentiment = 'Neutral' and Date between '{startdate}' and '{enddate}'"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                result['Post_data'] = post_data
                self.result = result
                self.close_database_connection()
        except Exception as e:
            print(str(e))

        return self.result

    def ig_daterange(self, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                                select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFinstagramsentiment where Date between '{startdate}' and '{enddate}' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where Date between '{startdate}' and '{enddate}'\
                              ) e\
                              order by Date desc"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/insta.png",
                                'Date': str(return_value[i][8])
                                }

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"

                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Instagram",
                                  'Username': "Sterling Alternative Finance",
                                  "Post": f"No post directed at sterling Alternative Finance between {startdate} and {enddate} on Instagram....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/insta.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                # print(post_data)
                query2 = f"select sum(total_mentions) as counts from (select count(*) total_mentions from sa.RefreshedSAFinstagramsentiment where Date between '{startdate}' and '{enddate}' union\
                                                                        select count(*) total_mentions from sa.RefreshedSAFinstagramcommentsentiment where Date between '{startdate}' and '{enddate}') a"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) counts from (select count(Instagram_Post) as sentiment from sa.RefreshedSAFinstagramsentiment where Date between '{startdate}' and '{enddate}' union\
                            select count(comment_sentiment) as sentiment from sa.RefreshedSAFinstagramcommentsentiment where Date between '{startdate}' and '{enddate}' \
                            and comment_sentiment = 'Positive') as e"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(comment_sentiment) as sentiment from sa.RefreshedSAFinstagramcommentsentiment where comment_sentiment = 'Negative' and Date between '{startdate}' and '{enddate}'"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(comment_sentiment) as sentiment from sa.RefreshedSAFinstagramcommentsentiment where comment_sentiment = 'Neutral' and Date between '{startdate}' and '{enddate}'"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                        # print('query 7')

                result['Post_data'] = post_data
                self.result = result
                self.close_database_connection()
        except Exception as e:
            print(str(e))

        return self.result

    def altpower(self):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                            select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                            comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and Date = CAST (GETDATE() AS DATE)  union all\
                            select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance'), Instagram_Post as post, Likes, \
                            Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFInstagramSentiment where Instagram_Post like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpower%' and Date = CAST (GETDATE() AS DATE)) as e"
                # and \
                # Date = '{self.today}' \
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Date': str(return_value[i][8])
                                }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Alternative Finance",
                                  "Post": "No post about Altpower so far on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                tweet_text like '%altpower%' and Date = CAST (GETDATE() AS DATE)) as e union \
                                                select count(Instagram_Post) as sentiment from sa.RefreshedSAFInstagramSentiment where Date = CAST (GETDATE() AS DATE) and Instagram_Post like '%altpower%') f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpower%' and sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e union\
                            select count(Instagram_Post) as sentiment from sa.RefreshedSAFInstagramSentiment where Date = CAST (GETDATE() AS DATE) and Instagram_Post like '%altpower%') f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Sentiment = 'Negative' and Date = CAST(GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpower%' and sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpower%' and sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            (select * from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                            ) as a\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                            as date))) and sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                            where text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                            from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                            and comment_sentiment = 'Positive' union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive') as e\
                            group by [sentiment]) a\
                            group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result['Positive_%change'] = f"{abs(round(return_value[i][0], 2)) * 100}% decrease from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                (select * from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Negative' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                tweet_text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                ) as a\
                                                group by [sentiment]\
                                                union\
                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                as date))) and sentiment = 'Negative' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                                                where text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                and comment_sentiment = 'Negative' union all\
                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                tweet_text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                group by [sentiment]) a\
                                                group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result['Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                (select * from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Neutral' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                tweet_text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                ) as a\
                                                group by [sentiment]\
                                                union\
                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                as date))) and sentiment = 'Neutral' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                                                where text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                and comment_sentiment = 'Neutral' union all\
                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                tweet_text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                group by [sentiment]) a\
                                                group by [sentiment])a"

                # print('query 8')
                # print(query8)

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result['Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtags, tweet_text, Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%altpower%' and  Hashtags != 'None' and Date = CAST(GETDATE() AS DATE)"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def daterange_altpower(self, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                            select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and Date between '{startdate}' and '{enddate}'  union all\
                            select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and date between '{startdate}' and '{enddate}' union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance'), Instagram_Post as post, Likes, \
                            Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFInstagramSentiment where Instagram_Post like '%altpower%' and Date between '{startdate}' and '{enddate}' union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and Date between '{startdate}' and '{enddate}' union all\
                            select top 100 isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpower%' and Date between '{startdate}' and '{enddate}'\
                            ) as e order by Date desc"
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Date': str(return_value[i][8])
                                }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Alternative Finance",
                                  "Post": f"No post about Altpower between {startdate} and {enddate} on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                    # output = {"post": post_data}
                    # result = post_data

                # # Sterling Alternative Finance
                # [sa].[RefreshedSAFFacebookSentiment]
                # [sa].[RefreshedSAFFacebookCommentSentiment]
                # [sa].[RefreshedSAFInstagramSentiment]
                # [sa].[RefreshedSAFInstagramCommentSentiment]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                tweet_text like '%altpower%' and Date between '{startdate}' and '{enddate}') as e union \
                                                select count(*) as sentiment from sa.RefreshedSAFInstagramSentiment where date between '{startdate}' and '{enddate}' and Instagram_Post like '%altpower%') f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and comment_sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpower%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}') as e union\
                            select count(*) as sentiment from sa.RefreshedSAFInstagramSentiment where date between '{startdate}' and '{enddate}' and Instagram_Post like '%altpower%') f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and comment_sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpower%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}') as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and comment_sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpower%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}') as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query9 = f"select Hashtags, tweet_text, date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%altpower%' and  Hashtags != 'None' and date between '{startdate}' and '{enddate}'"
                try:
                    self.cursor.execute(query9)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag
                else:
                    result['Trending_Hashtag'] = f"No hashtags found between {startdate} and {enddate}"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def altpay(self):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                            select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                            comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and Date = CAST (GETDATE() AS DATE)  union all\
                            select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance'), Instagram_Post as post, Likes, \
                            Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFInstagramSentiment where Instagram_Post like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpay%' and Date = CAST (GETDATE() AS DATE)) as e"
                # and \
                # Date = '{self.today}' \
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Alternative Finance",
                                  "Post": "No post about Altpay for today on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                tweet_text like '%altpay%' and Date = CAST (GETDATE() AS DATE)) as e union \
                                                select count(Instagram_Post) as sentiment from sa.RefreshedSAFInstagramSentiment where Instagram_Post like '%altpay%' and Date = CAST (GETDATE() AS DATE)) f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpay%' and sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e union\
                            select count(Instagram_Post) as sentiment from sa.RefreshedSAFInstagramSentiment where Instagram_Post like '%altpay%' and Date = CAST (GETDATE() AS DATE)) f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Sentiment = 'Negative' and Date = CAST(GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpay%' and sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpay%' and sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            (select * from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpay%' and Date = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                            ) as a\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                            as date))) union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                            where text like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                            from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                            and comment_sentiment = 'Positive' union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpay%' and Date = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive') as e\
                            group by [sentiment]) a\
                            group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Positive_%change'] = f"{abs(round(return_value[i][0], 2)) * 100}% decrease from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                (select * from(\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                tweet_text like '%altpay%' and Date = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                ) as a\
                                                group by [sentiment]\
                                                union\
                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                (select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                                                where text like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                and comment_sentiment = 'Negative' union all\
                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                tweet_text like '%altpay%' and Date = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                group by [sentiment]) a\
                                                group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result['Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                (select * from(\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                tweet_text like '%altpay%' and Date = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                ) as a\
                                                group by [sentiment]\
                                                union\
                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                (select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                                                where text like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                and comment_sentiment = 'Neutral' union all\
                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                tweet_text like '%altpay%' and Date = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                group by [sentiment]) a\
                                                group by [sentiment])a"

                # print('query 8')
                # print(query8)

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtags, tweet_text, Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%altpay%' and  Hashtags != 'None' and Date = CAST(GETDATE() AS DATE)"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace(
                        "'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def daterange_altpay(self, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                            select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                            comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and Date between '{startdate}' and '{enddate}'  union all\
                            select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and date between '{startdate}' and '{enddate}' union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance'), Instagram_Post as post, Likes, \
                            Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFInstagramSentiment where Instagram_Post like '%altpay%' and Date between '{startdate}' and '{enddate}' union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and Date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpay%' and Date between '{startdate}' and '{enddate}') as e order by Date desc"
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Date': str(return_value[i][8])
                                }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Alternative Finance",
                                  "Post": f"No post about Altpay between {startdate} and {enddate} on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and Date between '{startdate}' and '{enddate}' union all\
                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%i-invest%' and Date between '{startdate}' and '{enddate}' union all\
                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%i-invest%' and Date between '{startdate}' and '{enddate}' union all\
                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                tweet_text like '%altpay%' and Date between '{startdate}' and '{enddate}') as e union \
                                select count(*) as sentiment from sa.RefreshedSAFInstagramSentiment where Instagram_Post like '%altpay%'and date between '{startdate}' and '{enddate}') f"

                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and comment_sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpay%' and Date between '{startdate}' and '{enddate}' and Sentiment = 'Positive') as e union\
                            select count(*) as sentiment from sa.RefreshedSAFInstagramSentiment where Instagram_Post like '%altpay%'and date between '{startdate}' and '{enddate}') f"

                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and comment_sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpay%' and Sentiment = 'Negative' and Date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and comment_sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altpay%' and Sentiment = 'Neutral' and Date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query9 = f"select Hashtags, tweet_text, date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%altpay%' and  Hashtags != 'None' and date between '{startdate}' and '{enddate}'"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def doubble(self):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                            select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and Date = CAST (GETDATE() AS DATE)  union all\
                            select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                            Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                            like '%doubble%' and Date = CAST (GETDATE() AS DATE)) as e"
                # and \
                # Date = '{self.today}' \
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Bank PLC",
                                  "Post": "No post about doubble so far on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                                                like '%doubble%' and Date = CAST (GETDATE() AS DATE)) as e union \
                                                select count(Instagram_Post) as sentiment from sa.Refreshedinstagrambanksentiment where Date = CAST (GETDATE() AS DATE) and Instagram_Post like '%doubble%') f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                            like '%doubble%' and sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e union\
                            select count(Instagram_Post) as sentiment from sa.Refreshedinstagrambanksentiment where Date = CAST (GETDATE() AS DATE) and Instagram_Post like '%doubble%') f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Negative' and Date = CAST(GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                            like '%doubble%' and sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                            like '%doubble%' and sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            (select * from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                            where tweet_text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                            ) as a\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                            as date))) and sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment \
                            where text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                            from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                            and comment_sentiment = 'Positive' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                            where tweet_text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive') as e\
                            group by [sentiment]) a\
                            group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Positive_%change'] = f"{abs(round(return_value[i][0], 2)) * 100}% decrease from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                (select * from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Negative' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                                                where tweet_text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                ) as a\
                                                group by [sentiment]\
                                                union\
                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                as date))) and sentiment = 'Negative' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment \
                                                where text like '%i_invest%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                and comment_sentiment = 'Negative' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                                                where tweet_text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                group by [sentiment]) a\
                                                group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                (select * from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Neutral' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                                                where tweet_text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                ) as a\
                                                group by [sentiment]\
                                                union\
                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                as date))) and sentiment = 'Neutral' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment \
                                                where text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                and comment_sentiment = 'Neutral' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                                                where tweet_text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                group by [sentiment]) a\
                                                group by [sentiment])a"

                # print('query 8')
                # print(query8)

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtag, text, Date from sa.Refreshedtwitterbanksentiment where text like '%doubble%' and  Hashtag != 'None' and Date = CAST(GETDATE() AS DATE)"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace(
                        "'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def daterange_doubble(self, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                            select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and Date between '{startdate}' and '{enddate}'  union all\
                            select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and date between '{startdate}' and '{enddate}' union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                            Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%' and Date between '{startdate}' and '{enddate}' union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and Date between '{startdate}' and '{enddate}' union all\
                            select top 100 isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%doubble%' and Date between '{startdate}' and '{enddate}'\
                            ) as e order by Date desc"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Date': str(return_value[i][8])
                                }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Bank plc",
                                  "Post": f"No post about doubble between {startdate} and {enddate} on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                    # output = {"post": post_data}
                    # result = post_data

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                                like '%doubble%' and Date between '{startdate}' and '{enddate}') as e union \
                                                select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%'and date between '{startdate}' and '{enddate}') f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%doubble%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}') as e union\
                            select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%' and date between '{startdate}' and '{enddate}') f"

                # print('query 3')
                self.cursor.execute(query3)
                return_value = self.cursor.fetchall()

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%doubble%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%doubble%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query9 = f"select Hashtag, text, date from sa.Refreshedtwitterbanksentiment where text like '%doubble%' and  Hashtag != 'None' and date between '{startdate}' and '{enddate}'"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def altdrive(self):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                            select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and Date = CAST (GETDATE() AS DATE)  union all\
                            select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, isnull('Altdriveng','Altdriveng'), Instagram_Post as post, Likes, \
                            Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from [sa].[RefreshedAltdriveInstagramSentiment] where Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%altdrive%' and Date = CAST (GETDATE() AS DATE)) as e"
                # and \
                # Date = '{self.today}' \
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    post_data = [{"Channel": "Twitter",
                                  'Username': "SAF Altdrive",
                                  "Post": "No post about Altdrive so far on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where Date = CAST (GETDATE() AS DATE) union all\
                                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                like '%altdrive%' and Date = CAST (GETDATE() AS DATE)) as e union \
                                                select count(Instagram_Post) as sentiment from [sa].[RefreshedAltdriveInstagramSentiment] where Date = CAST (GETDATE() AS DATE)) f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%altdrive%' and sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e union\
                            select count(Instagram_Post) as sentiment from [sa].[RefreshedAltdriveInstagramSentiment] where Date = CAST (GETDATE() AS DATE) and Instagram_Post like '%altdrive%') f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Sentiment = 'Negative' and Date = CAST(GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%altdrive%' and sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%altdrive%' and sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            (select * from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                            ) as a\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                            as date))) and sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                            where text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                            from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                            and comment_sentiment = 'Positive' union all\
                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive') as e\
                            group by [sentiment]) a\
                            group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Positive_%change'] = f"{abs(round(return_value[i][0], 2)) * 100}% decrease from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                (select * from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Negative' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                ) as a\
                                                group by [sentiment]\
                                                union\
                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                as date))) and sentiment = 'Negative' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                                                where text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                and comment_sentiment = 'Negative' union all\
                                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                group by [sentiment]) a\
                                                group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                (select * from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Neutral' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                ) as a\
                                                group by [sentiment]\
                                                union\
                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                as date))) and sentiment = 'Neutral' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                                                where text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                and comment_sentiment = 'Neutral' union all\
                                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                group by [sentiment]) a\
                                                group by [sentiment])a"

                # print('query 8')
                # print(query8)

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtags, tweet_text, Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%altdrive%' and  Hashtags != 'None' and Date = CAST(GETDATE() AS DATE)"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace(
                        "'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def daterange_altdrive(self, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                            select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and Date between '{startdate}' and '{enddate}'  union all\
                            select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and date between '{startdate}' and '{enddate}' union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, isnull('Altdriveng','Altdriveng') as username, Instagram_Post as post, Likes, \
                            Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from [sa].[RefreshedAltdriveInstagramSentiment] where Date between '{startdate}' and '{enddate}' union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltdriveInstagramCommentSentiment where Date between '{startdate}' and '{enddate}' union all\
                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%altdrive%' and Date between '{startdate}' and '{enddate}'\
                            ) as e order by Date desc"
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Date': str(return_value[i][8])
                                }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Altdrive",
                                  "Post": f"No post found about Altdrive between {startdate} and {enddate} on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                    # output = {"post": post_data}
                    # result = post_data

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                select isnull('Facebook','Facebook') as Channel, isnull('Altdriveng','Altdriveng') as username, Text as post, Likes, \
                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and Date between '{startdate}' and '{enddate}' union all\
                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Date between '{startdate}' and '{enddate}' union all\
                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltdriveInstagramCommentSentiment where Date between '{startdate}' and '{enddate}' union all\
                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                like '%altdrive%' and Date between '{startdate}' and '{enddate}') as e union \
                                select count(*) as sentiment from sa.RefreshedAltdriveInstagramSentiment where date between '{startdate}' and '{enddate}') f"

                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Altdriveng','Altdriveng') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive','Negative') as sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltdriveInstagramCommentSentiment where comment_sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%altdrive%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}') as e union\
                            select count(*) as sentiment from sa.RefreshedAltdriveInstagramSentiment where date between '{startdate}' and '{enddate}') f"

                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltdriveInstagramCommentSentiment where comment_sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%altdrive%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltdriveInstagramCommentSentiment where comment_sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%altdrive%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = 0

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query9 = f"select Hashtags, tweet_text, date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%altdrive%' and  Hashtags != 'None' and date between '{startdate}' and '{enddate}'"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def altmall(self):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                            select top 100 isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                            comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedAltmallFacebookSentiment where Date = CAST (GETDATE() AS DATE)  union all\
                            select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, isnull('Altmallng','Altmallng'), Instagram_Post as post, Likes, \
                            Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedAltmallInstagramSentiment where Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where Date = CAST (GETDATE() AS DATE) union all\
                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%altmall%' and Date = CAST (GETDATE() AS DATE)) as e"
                # and \
                # Date = '{self.today}' \
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    post_data = [{"Channel": "Twitter",
                                  'Username': "Altmallng",
                                  "Post": "No post about Altmall so far on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedAltmallFacebookSentiment where Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                like '%altmall%' and Date = CAST (GETDATE() AS DATE)) as e union \
                                                select count(Instagram_Post) as sentiment from sa.RefreshedAltmallInstagramSentiment where Date = CAST (GETDATE() AS DATE)) f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedAltmallFacebookSentiment where Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%altmall%' and sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e union\
                            select count(Instagram_Post) as sentiment from sa.RefreshedAltmallInstagramSentiment where Date = CAST (GETDATE() AS DATE)) f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Sentiment = 'Negative' and Date = CAST(GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%altmall%' and sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%altmall%' and sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            (select * from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%altmall%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                            ) as a\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                            (select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                            as date))) and sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment \
                            where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                            from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                            and comment_sentiment = 'Positive' union all\
                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                            like '%altmall%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive') as e\
                            group by [sentiment]) a\
                            group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Positive_%change'] = f"{abs(round(return_value[i][0], 2)) * 100}% decrease from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                (select * from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Negative' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                like '%altmall%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                ) as a\
                                                group by [sentiment]\
                                                union\
                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                (select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                as date))) and sentiment = 'Negative' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment \
                                                where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                and comment_sentiment = 'Negative' union all\
                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                like '%altmall%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                group by [sentiment]) a\
                                                group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                (select * from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Neutral' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                like '%altmall%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                ) as a\
                                                group by [sentiment]\
                                                union\
                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                (select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                as date))) and sentiment = 'Neutral' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment \
                                                where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                and comment_sentiment = 'Neutral' union all\
                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                like '%altmall%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                group by [sentiment]) a\
                                                group by [sentiment])a"

                # print('query 8')
                # print(query8)

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtags, tweet_text, Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%altmall%' and  Hashtags != 'None' and Date = CAST(GETDATE() AS DATE)"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace(
                        "'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def daterange_altmall(self, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                            select top 100 isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedAltmallFacebookSentiment where Date between '{startdate}' and '{enddate}'  union all\
                            select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where date between '{startdate}' and '{enddate}' union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, isnull('Altmallng','Altmallng'), Instagram_Post as post, Likes, \
                            Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedAltmallInstagramSentiment where Date between '{startdate}' and '{enddate}' union all\
                            select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where Date between '{startdate}' and '{enddate}' union all\
                            select top 100 isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altmall%' and Date between '{startdate}' and '{enddate}'\
                            ) as e order by Date desc"
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Date': str(return_value[i][8])
                                }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Altmallng",
                                  "Post": f"No post about Altmall between {startdate} and {enddate} on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where Date between '{startdate}' and '{enddate}' union all\
                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Date between '{startdate}' and '{enddate}' union all\
                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where Date between '{startdate}' and '{enddate}' union all\
                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                tweet_text like '%altmall%' and Date between '{startdate}' and '{enddate}') as e union \
                                select count(*) as sentiment from sa.RefreshedAltmallInstagramSentiment where date between '{startdate}' and '{enddate}') f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Negative') as sentiment, Date from sa.RefreshedAltmallFacebookSentiment where date between '{startdate}' and '{enddate}' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where comment_sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altmall%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}') as e union\
                            select count(*) as sentiment from sa.RefreshedAltmallInstagramSentiment where date between '{startdate}' and '{enddate}') f"

                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where comment_sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altmall%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where comment_sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                            tweet_text like '%altmall%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query9 = f"select Hashtags, tweet_text, date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%altmall%' and  Hashtags != 'None' and date between '{startdate}' and '{enddate}'"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def brand_filter_by_sentiment(self, sentiment):
        try:
            if self.connection:
                result = {}
                post_data = []

                if sentiment == 'Positive':

                    query1 = f"select * from(\
                                    select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, \
                                    Text as post, Likes, comments,Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFfacebooksentiment where Date = CAST (GETDATE() AS DATE) union all\
                                    select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                    isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                                    where Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive' union all \
                                    select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance'), Instagram_Post as post, Likes,\
                                    Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFinstagramsentiment \
                                    where Date = CAST (GETDATE() AS DATE) union all\
                                    select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                    isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date\
                                    from sa.RefreshedSAFinstagramcommentsentiment where Date = CAST (GETDATE() AS DATE) and comment_sentiment = 'Positive' union all\
                                    select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) comments, \
                                    retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%alt%' \
                                    and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive') as e"
                else:
                    query1 = f"select * from(\
                                    select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                    isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                                    where Date = CAST (GETDATE() AS DATE) and sentiment = '{sentiment}' union all \
                                    select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                    isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date\
                                    from sa.RefreshedSAFinstagramcommentsentiment where Date = CAST (GETDATE() AS DATE) and comment_sentiment = '{sentiment}' union all\
                                    select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) comments, \
                                    retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%alt%'\
                                    and Date = CAST (GETDATE() AS DATE) and sentiment = '{sentiment}') as e"
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"

                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    post_data = [{"Channel": "Twitter",
                                  "Post": f"No post with {sentiment} sentiment tag found on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': f"{sentiment}",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                    if sentiment == "Positive":
                        post_data[0]["drop_down"] = ["Negative", "Neutral"]
                        post_data[0]["drop_down_emojie"] = [
                            "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                            "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                    elif sentiment == "Negative":
                        post_data[0]["drop_down"] = ["Positive", "Neutral"]
                        post_data[0]["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                            "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                    else:
                        post_data[0]["drop_down"] = ["Positive", "Negative"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                        post_data[0]["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                            "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                query2 = f"select count(*) from(\
                                                    select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                    comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Date = CAST (GETDATE() AS DATE) union all\
                                                    select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                    isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where Date = CAST (GETDATE() AS DATE)  union all\
                                                    select isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                                    Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFinstagramsentiment where Date = CAST (GETDATE() AS DATE)  union all\
                                                    select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                    isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where Date = CAST (GETDATE() AS DATE)  union all\
                                                    select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) comments, \
                                                    retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%alt%'\
                                                    and Date = CAST (GETDATE() AS DATE) ) as e"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                # print(result)

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) comments, \
                                retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%alt%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive') as e union\
                                select count(Instagram_Post) as sentiment from sa.RefreshedSAFinstagramsentiment where Date = CAST (GETDATE() AS DATE) ) f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where Sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) comments, \
                                retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%alt%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Negative') as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) comments, \
                                retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%alt%'\
                                and Date = CAST (GETDATE() AS DATE) and sentiment = 'Neutral') as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                (select * from(\
                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Positive' union all\
                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) comments, \
                                retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%alt%'\
                                and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                                ) as a\
                                group by [sentiment]\
                                union\
                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                                as date))) and sentiment = 'Positive' union all\
                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                                where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                and comment_sentiment = 'Positive' union all\
                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) comments, \
                                retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%alt%'\
                                and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive') as e\
                                group by [sentiment]) a\
                                group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"return_value: {return_value}")
                # return_value = [(26, 'Positive')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Positive_%change'] = f"{abs(round(return_value[i][0], 2)) * 100}% decrease from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                    select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                    select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                    (select * from(\
                                                    select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                    comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Negative' union all\
                                                    select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                    isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                    select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                    isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                    select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) comments, \
                                                    retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%alt%'\
                                                    and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                    ) as a\
                                                    group by [sentiment]\
                                                    union\
                                                    select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                    (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                    comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                    as date))) and sentiment = 'Negative' union all\
                                                    select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                    isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                                                    where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                    select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                    isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                    from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                    and comment_sentiment = 'Negative' union all\
                                                    select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) comments, \
                                                    retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%alt%'\
                                                    and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                    group by [sentiment]) a\
                                                    group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"return_value: {return_value}")
                # return_value = [(29, 'Negative')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                # sa.RefreshedSAFfacebooksentiment
                # RefreshedSAFfacebookcommentsentiment
                # RefreshedSAFinstagramsentiment
                # RefreshedSAFinstagramcommentsentiment
                # select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) comments, \
                # retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%alt%'

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                    select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                    select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                    (select * from(\
                                                    select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                    comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Neutral' union all\
                                                    select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                    isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                    select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                    isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                    select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) comments, \
                                                    retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%alt%'\
                                                    and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                    ) as a\
                                                    group by [sentiment]\
                                                    union\
                                                    select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                    (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                    comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                    as date))) and sentiment = 'Neutral' union all\
                                                    select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                    isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                                                    where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                    select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                    isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                    from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                    and comment_sentiment = 'Neutral' union all\
                                                    select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) comments, \
                                                    retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%alt%'\
                                                    and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                    group by [sentiment]) a\
                                                    group by [sentiment])a"

                # print('query 8')
                # print(query8)

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"return_value: {return_value}")
                # return_value = [(26, 'Neutral')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtags, tweet_text, Date from sa.RefreshedSAFtwitterbanksentiment2 where Hashtags != 'None' and Date = CAST(GETDATE() AS DATE) and tweet_text like '%alt%'"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace(
                        "'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                # print(result)

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def facebook_filter_by_sentiment(self, sentiment):
        try:
            if self.connection:
                result = {}
                post_data = []

                if sentiment == 'Positive':

                    query1 = f"select * from(\
                                select top 200 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes,\
                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFfacebooksentiment where Date = CAST (GETDATE() AS DATE) union all\
                                select top 200 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where Date = CAST (GETDATE() AS DATE)\
                                and sentiment = 'Positive') as e\
                                order by Date desc"
                else:
                    query1 = f"select * from(\
                                select top 400 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where Date = CAST (GETDATE() AS DATE)\
                                and sentiment = '{sentiment}') as e\
                                order by Date desc"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):

                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/facebook.png",
                            'Date': str(return_value[i][8])
                        }

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Facebook",
                                  "Post": f"No post with {sentiment} sentiment directed at sterling Alternative Finance so far on Facebook today....",
                                  'Username': "Sterling Alternative Finance",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/facebook.png",
                                  'Sentiment': f"{sentiment}",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                    if sentiment == "Positive":
                        post_data[0]["drop_down"] = ["Negative", "Neutral"]
                        post_data[0]["drop_down_emojie"] = [
                            "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                            "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                    elif sentiment == "Negative":
                        post_data[0]["drop_down"] = ["Positive", "Neutral"]
                        post_data[0]["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                            "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                    else:
                        post_data[0]["drop_down"] = ["Positive", "Negative"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                        post_data[0]["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                            "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                query2 = f"select sum(total_mentions) as counts from (select count(*) total_mentions from sa.RefreshedSAFfacebooksentiment where Date = CAST (GETDATE() AS DATE) union\
                                                                                        select count(*) total_mentions from sa.RefreshedSAFfacebookcommentsentiment where Date = CAST (GETDATE() AS DATE)) a"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) counts from (select count(sentiment) as sentiment from sa.RefreshedSAFfacebooksentiment \
                                           where Date = CAST (GETDATE() AS DATE) union\
                                           select count(sentiment) as sentiment from sa.RefreshedSAFfacebookcommentsentiment where Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from sa.RefreshedSAFfacebookcommentsentiment where Sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from sa.RefreshedSAFfacebookcommentsentiment where Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                            (select * from(\
                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes,\
                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Positive' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive'\
                                            ) as e\
                                            ) as a\
                                            group by [sentiment]\
                                            union\
                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                                            as date))) and sentiment = 'Positive' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment\
                                            where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positve'\
                                            ) as e\
                                            group by [sentiment]) a\
                                            group by [sentiment])a"
                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'positive_%change'] = f"{round(return_value[i][0] * 100, 2)}% increase from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Positive_%change'] = f"{round(abs(return_value[i][0]) * 100, 2)}% decrease from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                            (select * from(\
                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes,\
                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Negative' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative'\
                                            ) as e\
                                            ) as a\
                                            group by [sentiment]\
                                            union\
                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                                            as date))) and sentiment = 'Negative' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment\
                                            where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative'\
                                            ) as e\
                                            group by [sentiment]) a\
                                            group by [sentiment])a"
                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"return_value: {return_value}")
                # return_value = [(29, 'Negative')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Negative_%change'] = f"{round(return_value[i][0] * 100, 2)}% increase from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Negative_%change'] = f"{round(abs(return_value[i][0]) * 100, 2)}% decrease from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                            (select * from(\
                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes,\
                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Neutral' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral'\
                                            ) as e\
                                            ) as a\
                                            group by [sentiment]\
                                            union\
                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                                            as date))) and sentiment = 'Neutral' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment\
                                            where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral'\
                                            ) as e\
                                            group by [sentiment]) a\
                                            group by [sentiment])a"
                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"return_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        # print(i)
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0] * 100, 2)}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]) * 100, 2)}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                result['Post_data'] = post_data
                self.result = result
                self.close_database_connection()
        except Exception as e:
            print(str(e))

        return self.result

    def instagram_filter_by_sentiment(self, sentiment):
        try:
            if self.connection:
                result = {}
                post_data = []

                if sentiment == 'Positive':

                    query1 = f"select * from(\
                                            select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Instagram_Post as post, Likes, \
                                            Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFinstagramsentiment where Date = CAST (GETDATE() AS DATE) union all\
                                            select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where Date = CAST (GETDATE() AS DATE)\
                                          ) e\
                                          order by Date desc"
                else:
                    query1 = f"select * from(\
                                select top 200 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFinstagramcommentsentiment where Date = CAST (GETDATE() AS DATE)\
                              and comment_sentiment = '{sentiment}') e\
                              order by Date desc"

                # -- where Date = '{self.today}' \
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/insta.png",
                            'Date': str(return_value[i][8])
                        }

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Instagram",
                                  "Post": f"No post with {sentiment} sentiment directed at sterling Alternative Finance so far on Instagram today....",
                                  'Username': "Sterling Alternative Finance",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/insta.png",
                                  'Sentiment': f"{sentiment}",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]
                                  }]

                    if sentiment == "Positive":
                        post_data[0]["drop_down"] = ["Negative", "Neutral"]
                        post_data[0]["drop_down_emojie"] = [
                            "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                            "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                    elif sentiment == "Negative":
                        post_data[0]["drop_down"] = ["Positive", "Neutral"]
                        post_data[0]["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                            "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                    else:
                        post_data[0]["drop_down"] = ["Positive", "Negative"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                        post_data[0]["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                            "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                # print(post_data)
                query2 = f"select sum(total_mentions) as counts from (select count(*) total_mentions from sa.RefreshedSAFinstagramsentiment where Date = CAST (GETDATE() AS DATE) union\
                                                                                        select count(*) total_mentions from sa.RefreshedSAFinstagramcommentsentiment where Date = CAST (GETDATE() AS DATE)) a"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) counts from (select count(Instagram_Post) as sentiment from sa.RefreshedSAFinstagramsentiment where Date = CAST (GETDATE() AS DATE) union\
                                            select count(comment_sentiment) as sentiment from sa.RefreshedSAFinstagramcommentsentiment where Date = CAST (GETDATE() AS DATE)\
                                            and comment_sentiment = 'Positive') as e"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(comment_sentiment) as sentiment from sa.RefreshedSAFinstagramcommentsentiment where comment_sentiment = 'Negative and Date = CAST (GETDATE() AS DATE)'                                            "

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(comment_sentiment) as sentiment from sa.RefreshedSAFinstagramcommentsentiment where comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                    # print('query 7')

                query6 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                            (select * from(\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes,\
                                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                            from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                            and comment_sentiment = 'Positive'\
                                            ) as e\
                                            ) as a\
                                            group by [sentiment]\
                                            union\
                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from(\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes,\
                                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                            from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                            and comment_sentiment = 'Positive'\
                                            ) as e\
                                            group by [sentiment]) a\
                                            group by [sentiment])a"
                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"return_value: {return_value}")
                # return_value = [(29, 'Positive')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Positive_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                            (select * from(\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes,\
                                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                            from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                            and comment_sentiment = 'Negative'\
                                            ) as e\
                                            ) as a\
                                            group by [sentiment]\
                                            union\
                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from(\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes,\
                                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                            from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                            and comment_sentiment = 'Negative'\
                                            ) as e\
                                            group by [sentiment]) a\
                                            group by [sentiment])a"
                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"return_value: {return_value}")
                # return_value = [(29, 'Negative')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                            (select * from(\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes,\
                                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                            from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                            and comment_sentiment = 'Neutral'\
                                            ) as e\
                                            ) as a\
                                            group by [sentiment]\
                                            union\
                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from(\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes,\
                                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                            from sa.RefreshedSAFinstagramcommentsentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                            and comment_sentiment = 'Neutral'\
                                            ) as e\
                                            group by [sentiment]) a\
                                            group by [sentiment])a"
                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"return_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        # print(i)
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                result['Post_data'] = post_data
                self.result = result
                self.close_database_connection()
        except Exception as e:
            print(str(e))

        return self.result

    def twitter_filter_by_sentiment(self, sentiment):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                                        select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                        retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                        like '%alt%' and Date = CAST (GETDATE() AS DATE) and sentiment = '{sentiment}') as e"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):

                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/twitter.png",
                            'Date': str(return_value[i][8])
                        }

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                        # print(f"data1: {data}")
                else:
                    post_data = [{"Channel": "Twitter",
                                  "Post": f"No tweet with {sentiment} sentiment directed at Sterling Alternative Finance so far on Twitter today....",
                                  'Username': "Sterling Alternative Finance",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/twitter.png",
                                  'Sentiment': f"{sentiment}",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                    if sentiment == "Positive":
                        post_data[0]["drop_down"] = ["Negative", "Neutral"]
                        post_data[0]["drop_down_emojie"] = [
                            "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                            "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                    elif sentiment == "Negative":
                        post_data[0]["drop_down"] = ["Positive", "Neutral"]
                        post_data[0]["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                            "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                    else:
                        post_data[0]["drop_down"] = ["Positive", "Negative"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                        post_data[0]["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                            "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                query2 = f"select count(*) total_mentions from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%alt%' and Date = CAST (GETDATE() AS DATE)"

                self.cursor.execute(query2)
                return_value = self.cursor.fetchall()

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                    # print(f"total_mentions: {result['total_mentions']}")

                query3 = f"select count(sentiment) as sentiment from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                            like '%alt%' and Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                    # print(f"Positve_count: {result['Positve_count']}")

                query4 = f"select count(sentiment) as sentiment from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                            like '%alt%' and Sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                    # print(f"Negative_count: {result['Negative_count']}")

                query5 = f"select count(sentiment) as sentiment from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                            like '%alt%' and Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                    # print(f"Neutral_count: {result['Neutral_count']}")

                    # print('query 7')
                    # print(query7)

                query6 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                            sa.RefreshedSAFtwitterbanksentiment2 where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive'\
                                            group by [sentiment]\
                                            union\
                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                            sa.RefreshedSAFtwitterbanksentiment2 where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive'\
                                            group by [sentiment])a group by [sentiment]\
                                            )a"
                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # print(f"positive_return_value: {return_value}")
                # return_value = [(29, 'Positive')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Positive_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                            sa.RefreshedSAFtwitterbanksentiment2 where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative'\
                                            group by [sentiment]\
                                            union\
                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                            sa.RefreshedSAFtwitterbanksentiment2 where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative'\
                                            group by [sentiment])a group by [sentiment]\
                                            )a"
                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # return_value = self.cursor.fetchall()
                # print(f"Negative_return_value: {return_value}")
                # return_value = [(29, 'Negative')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = "select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                            sa.RefreshedSAFtwitterbanksentiment2 where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral'\
                                            group by [sentiment]\
                                            union\
                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                            sa.RefreshedSAFtwitterbanksentiment2 where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral'\
                                            group by [sentiment])a group by [sentiment]\
                                            )a"
                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # return_value = self.cursor.fetchall()
                # print(f"Neutral_return_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                        # result['Neutral_%change'] = f"{round(abs(return_value[i][0]), 2)}%"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtags from sa.RefreshedSAFtwitterbanksentiment2 where Hashtags != 'None' and tweet_text like '%alt%' and Date = CAST (GETDATE() AS DATE)"

                try:
                    self.cursor.execute(query9)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                # return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data
                self.result = result
                self.close_database_connection()
        except Exception as e:
            print(str(e))

        return self.result

    def altpower_filter_by_sentiment(self, sentiment):
        try:
            if self.connection:
                result = {}
                post_data = []

                if sentiment == 'Positive':

                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and Date = CAST (GETDATE() AS DATE)  union all\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance'), Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFInstagramSentiment where Instagram_Post like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and Date = CAST (GETDATE() AS DATE) and comment_sentiment = 'Positive' union all\
                                select top 100 isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                tweet_text like '%altpower%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive') as e"
                else:
                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Date = CAST (GETDATE() AS DATE) and sentiment = '{sentiment}' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and Date = CAST (GETDATE() AS DATE) and comment_sentiment = '{sentiment}' union all\
                                select top 100 isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                tweet_text like '%altpower%' and Date = CAST (GETDATE() AS DATE) and sentiment = '{sentiment}') as e"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Alternative Finance",
                                  "Post": f"No post with {sentiment} sentiment about Altpower so far on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': f"{sentiment}",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                    if sentiment == "Positive":
                        post_data[0]["drop_down"] = ["Negative", "Neutral"]
                        post_data[0]["drop_down_emojie"] = [
                            "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                            "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                    elif sentiment == "Negative":
                        post_data[0]["drop_down"] = ["Positive", "Neutral"]
                        post_data[0]["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                            "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                    else:
                        post_data[0]["drop_down"] = ["Positive", "Negative"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                        post_data[0]["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                            "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                tweet_text like '%altpower%' and Date = CAST (GETDATE() AS DATE)) as e union \
                                                                select count(Instagram_Post) as sentiment from sa.RefreshedSAFInstagramSentiment where Date = CAST (GETDATE() AS DATE) and Instagram_Post like '%altpower%') f"

                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                            tweet_text like '%altpower%' and sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e union\
                                            select count(Instagram_Post) as sentiment from sa.RefreshedSAFInstagramSentiment where Date = CAST (GETDATE() AS DATE) and Instagram_Post like '%altpower%') f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Sentiment = 'Negative' and Date = CAST(GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                            tweet_text like '%altpower%' and sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                            tweet_text like '%altpower%' and sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                            (select * from(\
                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Positive' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                            tweet_text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                                            ) as a\
                                            group by [sentiment]\
                                            union\
                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                            as date))) and sentiment = 'Positive' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                                            where text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                            from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                            and comment_sentiment = 'Positive' union all\
                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                            tweet_text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive') as e\
                                            group by [sentiment]) a\
                                            group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Positive_%change'] = f"{abs(round(return_value[i][0], 2)) * 100}% decrease from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                                (select * from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Negative' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                tweet_text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                                ) as a\
                                                                group by [sentiment]\
                                                                union\
                                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                                as date))) and sentiment = 'Negative' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                                                                where text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                                from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                                and comment_sentiment = 'Negative' union all\
                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                tweet_text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                                group by [sentiment]) a\
                                                                group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                                (select * from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Neutral' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                tweet_text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                                ) as a\
                                                                group by [sentiment]\
                                                                union\
                                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                                as date))) and sentiment = 'Neutral' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                                                                where text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                                from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                                and comment_sentiment = 'Neutral' union all\
                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                tweet_text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                                group by [sentiment]) a\
                                                                group by [sentiment])a"

                # print('query 8')
                # print(query8)

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtag, text, Date from sa.Refreshedtwitterbanksentiment where text like '%specta%' and  Hashtag != 'None' and Date = CAST(GETDATE() AS DATE)"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def altpower_filter_by_channel(self, platform):
        try:
            if self.connection:
                result = {}
                post_data = []

                if platform == 'Facebook':

                    query1 = f"select * from(\
                                select top 200 isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and Date = CAST (GETDATE() AS DATE)  union all\
                                select top 200 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive'\
                                ) as e"
                elif platform == 'Instagram':
                    query1 = f"select * from(\
                                select top 200 isnull('Instagram','Instagram') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFInstagramSentiment where Instagram_Post like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                                select top 200 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and Date = CAST (GETDATE() AS DATE)\
                                ) as e"
                else:
                    query1 = f"select * from(\
                                    select top 400 isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                    comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                    tweet_text like '%altpower%' and Date = CAST (GETDATE() AS DATE)) as e"



                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    if platform == 'Twitter':
                        channel_logo = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                    elif platform == 'Instagram':
                        channel_logo = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                    else:
                        channel_logo = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                    post_data = [{"Channel": f"{platform}",
                                  'Username': "Sterling Alternative Finance",
                                  "Post": f"No post on {platform} about Altpower so far today....",
                                  # 'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Channel_logo': channel_logo,
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                                tweet_text like '%altpower%' and Date = CAST (GETDATE() AS DATE)) as e union \
                                                                                select count(Instagram_Post) as sentiment from sa.RefreshedSAFInstagramSentiment where Date = CAST (GETDATE() AS DATE) and Instagram_Post like '%altpower%') f"

                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and Date = CAST (GETDATE() AS DATE) union all\
                                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                            tweet_text like '%altpower%' and sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e union\
                                                            select count(Instagram_Post) as sentiment from sa.RefreshedSAFInstagramSentiment where Date = CAST (GETDATE() AS DATE) and Instagram_Post like '%altpower%') f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Sentiment = 'Negative' and Date = CAST(GETDATE() AS DATE) union all\
                                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                            tweet_text like '%altpower%' and sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                            tweet_text like '%altpower%' and sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                            (select * from(\
                                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Positive' union all\
                                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                            tweet_text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                                                            ) as a\
                                                            group by [sentiment]\
                                                            union\
                                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                            as date))) and sentiment = 'Positive' union all\
                                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                                                            where text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                            from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                            and comment_sentiment = 'Positive' union all\
                                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                            tweet_text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive') as e\
                                                            group by [sentiment]) a\
                                                            group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Positive_%change'] = f"{abs(round(return_value[i][0], 2)) * 100}% decrease from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                                                (select * from(\
                                                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Negative' union all\
                                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                                tweet_text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                                                ) as a\
                                                                                group by [sentiment]\
                                                                                union\
                                                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                                                as date))) and sentiment = 'Negative' union all\
                                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                                                                                where text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                                                from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                                                and comment_sentiment = 'Negative' union all\
                                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                                tweet_text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                                                group by [sentiment]) a\
                                                                                group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                                                (select * from(\
                                                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Neutral' union all\
                                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                                tweet_text like '%altpower%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                                                ) as a\
                                                                                group by [sentiment]\
                                                                                union\
                                                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                                                as date))) and sentiment = 'Neutral' union all\
                                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                                                                                where text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                                                from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                                                and comment_sentiment = 'Neutral' union all\
                                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                                tweet_text like '%altpower%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                                                group by [sentiment]) a\
                                                                                group by [sentiment])a"

                # print('query 8')
                # print(query8)

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtag, text, Date from sa.Refreshedtwitterbanksentiment where text like '%specta%' and  Hashtag != 'None' and Date = CAST(GETDATE() AS DATE)"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def doubble_filter_by_sentiment(self, sentiment):
        try:
            if self.connection:
                result = {}
                post_data = []

                if sentiment == 'Positive':

                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and Date = CAST (GETDATE() AS DATE)  union all\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and Date = CAST (GETDATE() AS DATE) and comment_sentiment = 'Positive' union all\
                                select top 100 isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                                like '%doubble%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive') as e"
                else:
                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Date = CAST (GETDATE() AS DATE) and sentiment = '{sentiment}' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and Date = CAST (GETDATE() AS DATE) and comment_sentiment = '{sentiment}' union all\
                                select top 100 isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                                like '%doubble%' and Date = CAST (GETDATE() AS DATE) and sentiment = '{sentiment}') as e"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Date': str(return_value[i][8])
                                }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Bank PLC",
                                  "Post": f"No post with {sentiment} Sentiment about doubble so far on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/neut.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                                                like '%doubble%' and Date = CAST (GETDATE() AS DATE)) as e union \
                                                select count(Instagram_Post) as sentiment from sa.Refreshedinstagrambanksentiment where Date = CAST (GETDATE() AS DATE)) f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                            like '%doubble%' and sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e union\
                            select count(Instagram_Post) as sentiment from sa.Refreshedinstagrambanksentiment where Date = CAST (GETDATE() AS DATE)) f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Negative' and Date = CAST(GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                            like '%doubble%' and sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                            like '%doubble%' and sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            (select * from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                            where tweet_text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                            ) as a\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                            as date))) and sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment \
                            where text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                            from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                            and comment_sentiment = 'Positive' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                            where tweet_text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive') as e\
                            group by [sentiment]) a\
                            group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result['Positive_%change'] = f"{abs(round(return_value[i][0], 2)) * 100}% decrease from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                (select * from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Negative' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                                                where tweet_text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                ) as a\
                                                group by [sentiment]\
                                                union\
                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                as date))) and sentiment = 'Negative' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment \
                                                where text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                and comment_sentiment = 'Negative' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                                                where tweet_text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                group by [sentiment]) a\
                                                group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result['Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                (select * from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Neutral' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                                                where tweet_text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                ) as a\
                                                group by [sentiment]\
                                                union\
                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                as date))) and sentiment = 'Neutral' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment \
                                                where text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                and comment_sentiment = 'Neutral' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                                                where tweet_text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                group by [sentiment]) a\
                                                group by [sentiment])a"

                # print('query 8')
                # print(query8)

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result['Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtag, text, Date from sa.Refreshedtwitterbanksentiment where text like '%doubble%' and  Hashtag != 'None' and Date = CAST(GETDATE() AS DATE)"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def doubble_filter_by_channel(self, platform):
        try:
            if self.connection:
                result = {}
                post_data = []

                if platform == 'Facebook':

                    query1 = f"select * from(\
                                select top 200 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and Date = CAST (GETDATE() AS DATE)  union all\
                                select top 200 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive'\
                                ) as e"
                elif platform == 'Instagram':
                    query1 = f"select * from(\
                                select top 200 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                                select top 200 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and Date = CAST (GETDATE() AS DATE)\
                                ) as e"
                else:
                    query1 = f"select * from(\
                                    select top 400 isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                    retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                                    like '%doubble%' and Date = CAST (GETDATE() AS DATE)) as e"

                try:
                    print(query1)
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Date': str(return_value[i][8])
                                }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    if platform == 'Twitter':
                        url = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                    elif platform == 'Instagram':
                        url = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                    else:
                        url = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                    post_data = [{"Channel": f'{platform}',
                                  'Username': "Sterling Bank PLC",
                                  "Post": f"No post about doubble so far on {platform} today....",
                                  'Channel_logo': url,
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/neut.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                                                select isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                                                like '%doubble%' and Date = CAST (GETDATE() AS DATE)) as e union \
                                                select count(Instagram_Post) as sentiment from sa.Refreshedinstagrambanksentiment where Date = CAST (GETDATE() AS DATE)) f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                            like '%doubble%' and sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e union\
                            select count(Instagram_Post) as sentiment from sa.Refreshedinstagrambanksentiment where Date = CAST (GETDATE() AS DATE)) f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Negative' and Date = CAST(GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                            like '%doubble%' and sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                            select isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                            like '%doubble%' and sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                            (select * from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                            where tweet_text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                            ) as a\
                            group by [sentiment]\
                            union\
                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                            as date))) and sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment \
                            where text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                            from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                            and comment_sentiment = 'Positive' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                            where tweet_text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive') as e\
                            group by [sentiment]) a\
                            group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result['Positive_%change'] = f"{abs(round(return_value[i][0], 2)) * 100}% decrease from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                (select * from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Negative' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                                                where tweet_text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                ) as a\
                                                group by [sentiment]\
                                                union\
                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                as date))) and sentiment = 'Negative' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment \
                                                where text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                and comment_sentiment = 'Negative' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                                                where tweet_text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                group by [sentiment]) a\
                                                group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result['Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                (select * from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Neutral' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                                                where tweet_text like '%doubble%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                ) as a\
                                                group by [sentiment]\
                                                union\
                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                as date))) and sentiment = 'Neutral' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment \
                                                where text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                and comment_sentiment = 'Neutral' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 \
                                                where tweet_text like '%doubble%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                group by [sentiment]) a\
                                                group by [sentiment])a"

                # print('query 8')
                # print(query8)

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result['Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtag, text, Date from sa.Refreshedtwitterbanksentiment where text like '%doubble%' and  Hashtag != 'None' and Date = CAST(GETDATE() AS DATE)"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def altmall_filter_by_sentiment(self, sentiment):
        try:
            if self.connection:
                result = {}
                post_data = []

                if sentiment == 'Positive':

                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedAltmallFacebookSentiment where Text like '%altmall%' and Date = CAST (GETDATE() AS DATE)  union all\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where text like '%altmall%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedAltmallInstagramSentiment where Instagram_Post like '%altmall%' and Date = CAST (GETDATE() AS DATE) union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where user_comment like '%altmall%' and Date = CAST (GETDATE() AS DATE) and comment_sentiment = 'Positive' union all\
                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                like '%altmall%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive') as e"
                else:
                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where text like '%altmall%' and Date = CAST (GETDATE() AS DATE) and sentiment = '{sentiment}' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where user_comment like '%altmall%' and Date = CAST (GETDATE() AS DATE) and comment_sentiment = '{sentiment}' union all\
                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                like '%altmall%' and Date = CAST (GETDATE() AS DATE) and sentiment = '{sentiment}') as e"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': sentiment,
                            # 'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    post_data = [{"Channel": "Twitter",
                                  'Username': "Altmallng",
                                  "Post": f"No post with {sentiment} sentiment about Altmall so far on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': f"{sentiment}",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                    if sentiment == "Positive":
                        post_data[0]["drop_down"] = ["Negative", "Neutral"]
                        post_data[0]["drop_down_emojie"] = [
                            "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                            "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                    elif sentiment == "Negative":
                        post_data[0]["drop_down"] = ["Positive", "Neutral"]
                        post_data[0]["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                            "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                    else:
                        post_data[0]["drop_down"] = ["Positive", "Negative"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                        post_data[0]["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                            "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedAltmallFacebookSentiment where Date = CAST (GETDATE() AS DATE) union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Date = CAST (GETDATE() AS DATE) union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where Date = CAST (GETDATE() AS DATE) union all\
                                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altmall%' and Date = CAST (GETDATE() AS DATE)) as e union \
                                                                select count(Instagram_Post) as sentiment from sa.RefreshedAltmallInstagramSentiment where Date = CAST (GETDATE() AS DATE)) f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedAltmallFacebookSentiment where Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altmall%' and sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e union\
                                            select count(Instagram_Post) as sentiment from sa.RefreshedAltmallInstagramSentiment where Date = CAST (GETDATE() AS DATE)) f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Sentiment = 'Negative' and Date = CAST(GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altmall%' and sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altmall%' and sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                            (select * from(\
                                            select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Positive' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altmall%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                                            ) as a\
                                            group by [sentiment]\
                                            union\
                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                            (select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                                            as date))) and sentiment = 'Positive' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment \
                                            where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                            from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                            and comment_sentiment = 'Positive' union all\
                                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altmall%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive') as e\
                                            group by [sentiment]) a\
                                            group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Positive_%change'] = f"{abs(round(return_value[i][0], 2)) * 100}% decrease from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                                (select * from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Negative' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altmall%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                                ) as a\
                                                                group by [sentiment]\
                                                                union\
                                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                                (select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                                as date))) and sentiment = 'Negative' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment \
                                                                where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                                from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                                and comment_sentiment = 'Negative' union all\
                                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altmall%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                                group by [sentiment]) a\
                                                                group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                                (select * from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Neutral' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altmall%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                                ) as a\
                                                                group by [sentiment]\
                                                                union\
                                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                                (select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                                as date))) and sentiment = 'Neutral' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment \
                                                                where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                                from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                                and comment_sentiment = 'Neutral' union all\
                                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altmall%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                                group by [sentiment]) a\
                                                                group by [sentiment])a"

                # print('query 8')
                # print(query8)

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtags, tweet_text, Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%altmall%' and  Hashtags != 'None' and Date = CAST(GETDATE() AS DATE)"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def altmall_filter_by_channel(self, platform):
        try:
            if self.connection:
                result = {}
                post_data = []

                if platform == 'Facebook':

                    query1 = f"select * from(\
                                select top 200 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedAltmallFacebookSentiment where Text like '%altmall%' and Date = CAST (GETDATE() AS DATE)  union all\
                                select top 200 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where text like '%altmall%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive'\
                                ) as e"
                elif platform == 'Instagram':
                    query1 = f"select top 200 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedAltmallInstagramSentiment where Instagram_Post like '%altmall%' and Date = CAST (GETDATE() AS DATE) union all\
                                select top 200 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where user_comment like '%altmall%' and Date = CAST (GETDATE() AS DATE)"
                else:
                    query1 = f"select * from(\
                                    select top 400 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                    retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                    like '%altmall%' and Date = CAST (GETDATE() AS DATE)) as e"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    if platform == 'Twitter':
                        Channel_logo = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                    elif platform == 'Instagram':
                        Channel_logo = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                    else:
                        Channel_logo = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                    post_data = [{"Channel": platform,
                                  'Username': "Altmallng",
                                  "Post": f"No post about Altmall so far on {platform} today....",
                                  # 'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Channel_logo': Channel_logo,
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedAltmallFacebookSentiment where Date = CAST (GETDATE() AS DATE) union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Date = CAST (GETDATE() AS DATE) union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where Date = CAST (GETDATE() AS DATE) union all\
                                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altmall%' and Date = CAST (GETDATE() AS DATE)) as e union \
                                                                select count(Instagram_Post) as sentiment from sa.RefreshedAltmallInstagramSentiment where Date = CAST (GETDATE() AS DATE)) f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedAltmallFacebookSentiment where Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altmall%' and sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e union\
                                            select count(Instagram_Post) as sentiment from sa.RefreshedAltmallInstagramSentiment where Date = CAST (GETDATE() AS DATE)) f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Sentiment = 'Negative' and Date = CAST(GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altmall%' and sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altmall%' and sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                            (select * from(\
                                            select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Positive' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altmall%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                                            ) as a\
                                            group by [sentiment]\
                                            union\
                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                            (select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                                            as date))) and sentiment = 'Positive' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment \
                                            where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                            from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                            and comment_sentiment = 'Positive' union all\
                                            select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altmall%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive') as e\
                                            group by [sentiment]) a\
                                            group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Positive_%change'] = f"{abs(round(return_value[i][0], 2)) * 100}% decrease from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                                (select * from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Negative' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altmall%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                                ) as a\
                                                                group by [sentiment]\
                                                                union\
                                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                                (select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                                as date))) and sentiment = 'Negative' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment \
                                                                where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                                from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                                and comment_sentiment = 'Negative' union all\
                                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altmall%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                                group by [sentiment]) a\
                                                                group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                                (select * from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Neutral' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altmall%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                                ) as a\
                                                                group by [sentiment]\
                                                                union\
                                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                                (select isnull('Facebook','Facebook') as Channel, isnull('Altmallng','Altmallng') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedAltmallFacebookSentiment where [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                                as date))) and sentiment = 'Neutral' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedAltmallFacebookCommentSentiment \
                                                                where [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                                from sa.RefreshedAltmallInstagramCommentSentiment where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                                and comment_sentiment = 'Neutral' union all\
                                                                select isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altmall%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                                group by [sentiment]) a\
                                                                group by [sentiment])a"

                # print('query 8')
                # print(query8)

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtags, tweet_text, Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%altmall%' and  Hashtags != 'None' and Date = CAST(GETDATE() AS DATE)"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def altdrive_filter_by_sentiment(self, sentiment):
        try:
            if self.connection:
                result = {}
                post_data = []

                if sentiment == 'Positive':

                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and Date = CAST (GETDATE() AS DATE)  union all\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedAltdriveInstagramSentiment where Instagram_Post like '%altdrive%' and Date = CAST (GETDATE() AS DATE) union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltdriveInstagramCommentSentiment where user_comment like '%altdrive%' and Date = CAST (GETDATE() AS DATE) and comment_sentiment = 'Positive' union all\
                                select top 100 isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                                like '%onepay%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive') as e"
                else:
                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Date = CAST (GETDATE() AS DATE) and sentiment = '{sentiment}' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltdriveInstagramCommentSentiment where user_comment like '%altdrive%' and Date = CAST (GETDATE() AS DATE) and comment_sentiment = '{sentiment}' union all\
                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                like '%altdrive%' and Date = CAST (GETDATE() AS DATE) and sentiment = '{sentiment}') as e"

                query1 = f"select * from(\
                                            select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                            comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and Date = CAST (GETDATE() AS DATE)  union all\
                                            select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Date = CAST (GETDATE() AS DATE) union all\
                                            select top 100 isnull('Instagram','Instagram') as Channel, isnull('Altdriveng','Altdriveng'), Instagram_Post as post, Likes, \
                                            Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from [sa].[RefreshedAltdriveInstagramSentiment] where Date = CAST (GETDATE() AS DATE) union all\
                                            select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where Date = CAST (GETDATE() AS DATE) union all\
                                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altdrive%' and Date = CAST (GETDATE() AS DATE)) as e"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    post_data = [{"Channel": "Twitter",
                                  'Username': "SAF Altdrive",
                                  "Post": f"No post with {sentiment} sentiment about Altdrive so far on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': f"{sentiment}",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                    if sentiment == "Positive":
                        post_data[0]["drop_down"] = ["Negative", "Neutral"]
                        post_data[0]["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                            "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                    elif sentiment == "Negative":
                        post_data[0]["drop_down"] = ["Positive", "Neutral"]
                        post_data[0]["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                            "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                    else:
                        post_data[0]["drop_down"] = ["Positive", "Negative"]
                        post_data[0]["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                        post_data[0]["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                            "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and Date = CAST (GETDATE() AS DATE) union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Date = CAST (GETDATE() AS DATE) union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where Date = CAST (GETDATE() AS DATE) union all\
                                                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altdrive%' and Date = CAST (GETDATE() AS DATE)) as e union \
                                                                select count(Instagram_Post) as sentiment from [sa].[RefreshedAltdriveInstagramSentiment] where Date = CAST (GETDATE() AS DATE)) f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altdrive%' and sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e union\
                                            select count(Instagram_Post) as sentiment from [sa].[RefreshedAltdriveInstagramSentiment] where Date = CAST (GETDATE() AS DATE) and Instagram_Post like '%altdrive%') f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Sentiment = 'Negative' and Date = CAST(GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altdrive%' and sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altdrive%' and sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                            (select * from(\
                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Positive' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                                            ) as a\
                                            group by [sentiment]\
                                            union\
                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                            as date))) and sentiment = 'Positive' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                                            where text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                            from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                            and comment_sentiment = 'Positive' union all\
                                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive') as e\
                                            group by [sentiment]) a\
                                            group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Positive_%change'] = f"{abs(round(return_value[i][0], 2)) * 100}% decrease from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                                (select * from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Negative' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                                ) as a\
                                                                group by [sentiment]\
                                                                union\
                                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                                as date))) and sentiment = 'Negative' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                                                                where text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                                from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                                and comment_sentiment = 'Negative' union all\
                                                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                                group by [sentiment]) a\
                                                                group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                                (select * from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Neutral' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                                ) as a\
                                                                group by [sentiment]\
                                                                union\
                                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                                as date))) and sentiment = 'Neutral' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                                                                where text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                                from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                                and comment_sentiment = 'Neutral' union all\
                                                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                                group by [sentiment]) a\
                                                                group by [sentiment])a"

                # print('query 8')
                # print(query8)

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtags, tweet_text, Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%altdrive%' and  Hashtags != 'None' and Date = CAST(GETDATE() AS DATE)"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def altdrive_filter_by_channel(self, platform):
        try:
            if self.connection:
                result = {}
                post_data = []

                if platform == 'Facebook':

                    query1 = f"select * from(\
                                select top 200 isnull('Facebook','Facebook') as Channel, isnull('Altdriveng','Altdriveng') as username, Text as post, Likes, \
                                comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and Date = CAST (GETDATE() AS DATE)  union all\
                                select top 200 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive'\
                                ) as e"
                elif platform == 'Instagram':
                    query1 = f"select top 200 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedAltdriveInstagramSentiment where Instagram_Post like '%altdrive%' and Date = CAST (GETDATE() AS DATE) union all\
                                select top 200 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedAltdriveInstagramCommentSentiment where user_comment like '%altmall%' and Date = CAST (GETDATE() AS DATE)"
                else:
                    query1 = f"select * from(\
                                    select top 400 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                    retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                    like '%altdrive%' and Date = CAST (GETDATE() AS DATE)) as e"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    if platform == 'Twitter':
                        Channel_logo = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                    elif platform == 'Instagram':
                        Channel_logo = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                    else:
                        Channel_logo = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                    post_data = [{"Channel": platform,
                                  'Username': "Altdriveng",
                                  "Post": f"No post about Altdrive so far on {platform} today....",
                                  # 'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Channel_logo': Channel_logo,
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and Date = CAST (GETDATE() AS DATE) union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Date = CAST (GETDATE() AS DATE) union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where Date = CAST (GETDATE() AS DATE) union all\
                                                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altdrive%' and Date = CAST (GETDATE() AS DATE)) as e union \
                                                                select count(Instagram_Post) as sentiment from [sa].[RefreshedAltdriveInstagramSentiment] where Date = CAST (GETDATE() AS DATE)) f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altdrive%' and sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e union\
                                            select count(Instagram_Post) as sentiment from [sa].[RefreshedAltdriveInstagramSentiment] where Date = CAST (GETDATE() AS DATE) and Instagram_Post like '%altdrive%') f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Sentiment = 'Negative' and Date = CAST(GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altdrive%' and sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altdrive%' and sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                            (select * from(\
                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Positive' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                                            ) as a\
                                            group by [sentiment]\
                                            union\
                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                            as date))) and sentiment = 'Positive' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                                            where text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                            from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                            and comment_sentiment = 'Positive' union all\
                                            select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                            like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive') as e\
                                            group by [sentiment]) a\
                                            group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Positive_%change'] = f"{abs(round(return_value[i][0], 2)) * 100}% decrease from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                                (select * from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Negative' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                                ) as a\
                                                                group by [sentiment]\
                                                                union\
                                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                                as date))) and sentiment = 'Negative' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                                                                where text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                                from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                                and comment_sentiment = 'Negative' union all\
                                                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                                group by [sentiment]) a\
                                                                group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                                (select * from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and sentiment = 'Neutral' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment where text like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altdrive%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                                ) as a\
                                                                group by [sentiment]\
                                                                union\
                                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                                (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.RefreshedSAFfacebooksentiment where Text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                                as date))) and sentiment = 'Neutral' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFfacebookcommentsentiment \
                                                                where text like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                                from [sa].[RefreshedAltdriveInstagramCommentSentiment] where [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                                and comment_sentiment = 'Neutral' union all\
                                                                select top 100 isnull('Twitter','Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text \
                                                                like '%altdrive%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                                group by [sentiment]) a\
                                                                group by [sentiment])a"

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtags, tweet_text, Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%altdrive%' and  Hashtags != 'None' and Date = CAST(GETDATE() AS DATE)"

                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def altpay_filter_by_sentiment(self, sentiment):
        try:
            if self.connection:
                result = {}
                post_data = []

                if sentiment == 'Positive':

                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and Date = CAST (GETDATE() AS DATE)  union all\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFInstagramSentiment where Instagram_Post like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and Date = CAST (GETDATE() AS DATE) and comment_sentiment = 'Positive' union all\
                                select top 100 isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                tweet_text like '%altpay%' and Date = CAST (GETDATE() AS DATE) and sentiment = 'Positive') as e"
                else:
                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Date = CAST (GETDATE() AS DATE) and sentiment = '{sentiment}' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and Date = CAST (GETDATE() AS DATE) and comment_sentiment = '{sentiment}' union all\
                                select top 100 isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                tweet_text like '%altpay%' and Date = CAST (GETDATE() AS DATE) and sentiment = '{sentiment}') as e"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Alternative Finance",
                                  "Post": f"No post with {sentiment} sentiment about Altpay for today on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                tweet_text like '%altpay%' and Date = CAST (GETDATE() AS DATE)) as e union \
                                                                select count(Instagram_Post) as sentiment from sa.RefreshedSAFInstagramSentiment where Instagram_Post like '%altpay%' and Date = CAST (GETDATE() AS DATE)) f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                            tweet_text like '%altpay%' and sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e union\
                                            select count(Instagram_Post) as sentiment from sa.RefreshedSAFInstagramSentiment where Instagram_Post like '%altpay%' and Date = CAST (GETDATE() AS DATE)) f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Sentiment = 'Negative' and Date = CAST(GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                            tweet_text like '%altpay%' and sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                            tweet_text like '%altpay%' and sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                            (select * from(\
                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                            tweet_text like '%altpay%' and Date = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                                            ) as a\
                                            group by [sentiment]\
                                            union\
                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                            as date))) union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                                            where text like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                            from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                            and comment_sentiment = 'Positive' union all\
                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                            tweet_text like '%altpay%' and Date = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive') as e\
                                            group by [sentiment]) a\
                                            group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Positive_%change'] = f"{abs(round(return_value[i][0], 2)) * 100}% decrease from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                                (select * from(\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                tweet_text like '%altpay%' and Date = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                                ) as a\
                                                                group by [sentiment]\
                                                                union\
                                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                                (select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                                                                where text like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                                from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                                and comment_sentiment = 'Negative' union all\
                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                tweet_text like '%altpay%' and Date = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                                group by [sentiment]) a\
                                                                group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                                (select * from(\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                tweet_text like '%altpay%' and Date = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                                ) as a\
                                                                group by [sentiment]\
                                                                union\
                                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                                (select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                                                                where text like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                                from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                                and comment_sentiment = 'Neutral' union all\
                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                tweet_text like '%altpay%' and Date = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                                group by [sentiment]) a\
                                                                group by [sentiment])a"

                # print('query 8')
                # print(query8)

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtags, tweet_text, Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%altpay%' and  Hashtags != 'None' and Date = CAST(GETDATE() AS DATE)"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def altpay_filter_by_channel(self, platform):
        try:
            if self.connection:
                result = {}
                post_data = []

                if platform == 'Facebook':

                    query1 = f"select * from(\
                                select top 200 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and Date = CAST (GETDATE() AS DATE)  union all\
                                select top 200 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Date = CAST (GETDATE() AS DATE)) as e"
                elif platform == 'Instagram':

                    query1 = f"select top 200 isnull('Instagram','Instagram') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance'), Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.RefreshedSAFInstagramSentiment where Instagram_Post like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                                select top 200 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and Date = CAST (GETDATE() AS DATE)"
                else:

                    query1 = f"select * from(\
                                    select top 400 isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                    comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%altpay%' and Date = CAST (GETDATE() AS DATE)) as e"


                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    if platform == 'Twitter':
                        Channel_logo = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                    elif platform == 'Instagram':
                        Channel_logo = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                    else:
                        Channel_logo = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                    post_data = [{"Channel": f"platform",
                                  'Username': "Sterling Alternative Finance",
                                  "Post": f"No post found on  {platform} about Altpay for today..",
                                  # 'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  "Channel_logo": Channel_logo,
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                                tweet_text like '%altpay%' and Date = CAST (GETDATE() AS DATE)) as e union \
                                                                                select count(Instagram_Post) as sentiment from sa.RefreshedSAFInstagramSentiment where Instagram_Post like '%altpay%' and Date = CAST (GETDATE() AS DATE)) f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and Date = CAST (GETDATE() AS DATE) union all\
                                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and comment_sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE) union all\
                                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                            tweet_text like '%altpay%' and sentiment = 'Positive' and Date = CAST (GETDATE() AS DATE)) as e union\
                                                            select count(Instagram_Post) as sentiment from sa.RefreshedSAFInstagramSentiment where Instagram_Post like '%altpay%' and Date = CAST (GETDATE() AS DATE)) f"

                # print('done with query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Sentiment = 'Negative' and Date = CAST(GETDATE() AS DATE) union all\
                                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and comment_sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE) union all\
                                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                            tweet_text like '%altpay%' and sentiment = 'Negative' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('done with query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0) as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and Sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and comment_sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE) union all\
                                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                            tweet_text like '%altpay%' and sentiment = 'Neutral' and Date = CAST (GETDATE() AS DATE)) as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                            select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                            select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                            (select * from(\
                                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) union all\
                                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive' union all\
                                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Positive' union all\
                                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                            tweet_text like '%altpay%' and Date = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Positive') as e\
                                                            ) as a\
                                                            group by [sentiment]\
                                                            union\
                                                            select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                            (select isnull('Facebook','Facebook') as Channel, isnull('Sterling Alternative Finance','Sterling Alternative Finance') as username, Text as post, Likes, \
                                                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.RefreshedSAFFacebookSentiment where Text like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate()\
                                                            as date))) union all\
                                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                                                            where text like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive' union all\
                                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                            isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                            from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                            and comment_sentiment = 'Positive' union all\
                                                            select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                            comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                            tweet_text like '%altpay%' and Date = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Positive') as e\
                                                            group by [sentiment]) a\
                                                            group by [sentiment])a"

                # print('query 6')
                # print(query6)

                try:
                    self.cursor.execute(query6)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    return_value = []
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Positive_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result['%change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Positive_%change'] = f"{abs(round(return_value[i][0], 2)) * 100}% decrease from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/gdown.png"
                        else:
                            result['Positive_%change'] = "0% change from yesterday"
                            result[
                                '%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Positive_%change'] = "0% change from yesterday"
                    result['%Positive_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query7 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                                                (select * from(\
                                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative' union all\
                                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Negative' union all\
                                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                                tweet_text like '%altpay%' and Date = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Negative') as e\
                                                                                ) as a\
                                                                                group by [sentiment]\
                                                                                union\
                                                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                                                (select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                                                                                where text like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative' union all\
                                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                                                from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                                                and comment_sentiment = 'Negative' union all\
                                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                                tweet_text like '%altpay%' and Date = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Negative') as e\
                                                                                group by [sentiment]) a\
                                                                                group by [sentiment])a"

                # print('query 7')
                # print(query7)

                try:
                    self.cursor.execute(query7)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result[
                                'Negative_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rup.png"
                        elif return_value[i][0] < 0:
                            result[
                                'Negative_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/rdown.png"
                        else:
                            result['Negative_%change'] = "0% change from yesterday"
                            result[
                                '%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"
                else:
                    result['Negative_%change'] = "0% change from yesterday"
                    result['%Negative_change_icon'] = "https://azermstorage.blob.core.windows.net/appimages/eq.png"

                query8 = f"select ([CurrentdayTotal] - [YesterdayTotal])/([YesterdayTotal]) Current_Yesterday, [sentiment] from (\
                                                                                select sum([CurrentdayTotal]) [CurrentdayTotal], sum([YesterdayTotal]) [YesterdayTotal], [sentiment] from(\
                                                                                select 0 [YesterdayTotal], cast(COUNT([sentiment]) as float) [CurrentdayTotal], [sentiment] from\
                                                                                (select * from(\
                                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment where text like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral' union all\
                                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select convert(varchar(10), getdate(), 120)) and comment_sentiment = 'Neutral' union all\
                                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                                tweet_text like '%altpay%' and Date = (select convert(varchar(10), getdate(), 120)) and [sentiment] = 'Neutral') as e\
                                                                                ) as a\
                                                                                group by [sentiment]\
                                                                                union\
                                                                                select cast(COUNT([sentiment]) as float) [YesterdayTotal], 0 [CurrentdayTotal], [sentiment] from\
                                                                                (select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.RefreshedSAFFacebookCommentSentiment \
                                                                                where text like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral' union all\
                                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, \
                                                                                isnull(0,0) as comments, isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as sentiment, Date\
                                                                                from sa.RefreshedSAFInstagramCommentSentiment where user_comment like '%altpay%' and [Date] = (select dateadd(dd,-1, cast(getdate() as date)))\
                                                                                and comment_sentiment = 'Neutral' union all\
                                                                                select isnull('Twitter', 'Twitter') as Channel, username as username, tweet_text as post, favorited_count as Likes, isnull(0, 0) \
                                                                                comments, retweet_count as Shares, Post_url, sentiment, Post_Time as Date from sa.RefreshedSAFtwitterbanksentiment2 where \
                                                                                tweet_text like '%altpay%' and Date = (select dateadd(dd,-1, cast(getdate() as date))) and [sentiment] = 'Neutral') as e\
                                                                                group by [sentiment]) a\
                                                                                group by [sentiment])a"

                # print('query 8')
                # print(query8)

                try:
                    self.cursor.execute(query8)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        if return_value[i][0] > 0:
                            result['Neutral_%change'] = f"{round(return_value[i][0], 2) * 100}% increase from yesterday"
                        elif return_value[i][0] < 0:
                            result[
                                'Neutral_%change'] = f"{round(abs(return_value[i][0]), 2) * 100}% decrease from yesterday"
                        else:
                            result['Neutral_%change'] = "0% change from yesterday"
                else:
                    result['Neutral_%change'] = "0% change from yesterday"

                query9 = "select Hashtags, tweet_text, Date from sa.RefreshedSAFtwitterbanksentiment2 where tweet_text like '%altpay%' and  Hashtags != 'None' and Date = CAST(GETDATE() AS DATE)"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def brand_daterange_filter_by_sentiment(self, sentiment, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                if sentiment == 'Positive':

                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Date between '{startdate}' and '{enddate}' order by Date desc union all\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where Date between '{startdate}' and '{enddate}' and sentiment = 'Positive' order by Date desc union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Date between '{startdate}' and '{enddate}' order by Date desc union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where Date between '{startdate}' and '{enddate}' and comment_sentiment = 'Positive' order by Date desc union all\
                                select top 100 isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where Date between '{startdate}' and '{enddate}' and tweet_text \
                                like '%sterling%' and sentiment = 'Positive'\
                                order by Date desc) as e order by Date desc"
                else:
                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where Date between '{startdate}' and '{enddate}' and sentiment = '{sentiment}' order by Date desc union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where Date between '{startdate}' and '{enddate}' and comment_sentiment = '{sentiment}' order by Date desc union all\
                                select top 100 isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where Date between '{startdate}' and '{enddate}' and tweet_text \
                                like '%sterling%' and sentiment = '{sentiment}'\
                                order by Date desc) as e order by Date desc"
                # and \
                # Date = '{self.today}' \
                # print(f"i am here")
                # print(query1)
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Date': str(return_value[i][8])
                                }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = [
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"

                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Bank PLC",
                                  "Post": f"No post with {sentiment} sentiment between {startdate}  and {enddate} directed at sterling so far on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/neut.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select count(*) from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where Date between '{startdate}' and '{enddate}' and tweet_text \
                                                like '%sterling%') as e"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                # print(f"done with query 2")

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Date between '{startdate}' and '{enddate}' and Sentiment = 'Positive' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where Date between '{startdate}' and '{enddate}' and Sentiment = 'Positive' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where Date between '{startdate}' and '{enddate}' and comment_sentiment = 'Positive' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where Date between '{startdate}' and '{enddate}' and tweet_text \
                            like '%sterling%' and Sentiment = 'Positive') as e union\
                            select count(Instagram_Post) as sentiment from sa.Refreshedinstagrambanksentiment) f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                # print(f"done with query 3")

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Date between '{startdate}' and '{enddate}' and Sentiment = 'Negative' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where Date between '{startdate}' and '{enddate}' and Sentiment = 'Negative' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where Date between '{startdate}' and '{enddate}' and comment_sentiment = 'Negative' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where Date between '{startdate}' and '{enddate}' and tweet_text \
                            like '%sterling%' and Sentiment = 'Negative') as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                # print(f"done with query 4")

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Date between '{startdate}' and '{enddate}' and Sentiment = 'Neutral' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where Date between '{startdate}' and '{enddate}' and Sentiment = 'Neutral' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where Date between '{startdate}' and '{enddate}' and comment_sentiment = 'Neutral' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where Date between '{startdate}' and '{enddate}' and tweet_text \
                            like '%sterling%' and Sentiment = 'Neutral') as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                # print(f"done with query 5")

                query6 = f"select Hashtag from sa.Refreshedtwitterbanksentiment where Date between '{startdate}' and '{enddate}' and text like '%sterling%' and Hashtag != 'None'"
                try:
                    self.cursor.execute(query6)
                except Exception as e:
                    print(str(e))

                # print(f"done with query 6")

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def twitter_daterange_filter_by_sentiment(self, sentiment, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                query1 = f"select * from(\
                            select top 200 isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%sterling%' and Date between '{startdate}' and '{enddate}' and sentiment = '{sentiment}'\
                            order by Date desc) as e"

                # print(f"query1: {query1}")
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []
                # print(f"query1: {return_value}")

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/twitter.png",
                            'Date': str(return_value[i][8])
                        }

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Bank PLC",
                                  "Post": f"No post directed at sterling between {startdate} and {enddate} on Twitter....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': [
                                      "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                      "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select count(*) total_mentions from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                            like '%sterling%' and Date between '{startdate}' and '{enddate}'"

                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select count(sentiment) as sentiment from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                            like '%sterling%' and Date between '{startdate}' and '{enddate}' and Sentiment = 'Positive'"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                    # print(f"Positve_count: {result['Positve_count']}")

                query4 = f"select count(sentiment) as sentiment from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                                            like '%sterling%' and Date between '{startdate}' and '{enddate}' and Sentiment = 'Negative'"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                    # print(f"Negative_count: {result['Negative_count']}")

                query5 = f"select count(sentiment) as sentiment from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                                            like '%sterling%' and Date between '{startdate}' and '{enddate}' and Sentiment = 'Neutral'"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query6 = f"select Hashtag from sa.Refreshedtwitterbanksentiment where Date between '{startdate}' and '{enddate}' and text like '%sterling%' and Hashtag != 'None'"
                try:
                    self.cursor.execute(query6)
                except Exception as e:
                    print(str(e))

                # print(f"done with query 6")

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = f"No hashtags found between {startdate} and {enddate}"

                result['Post_data'] = post_data
                self.result = result
                self.close_database_connection()
        except Exception as e:
            print(str(e))

        return self.result

    def facebook_daterange_filter_by_sentiment(self, sentiment, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                if sentiment == 'Positive':

                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes,\
                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Date between '{startdate}' and '{enddate}' union all\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment\
                                 where Date between '{startdate}' and '{enddate}' and sentiment = 'Positive') as e\
                                order by Date desc"
                else:
                    query1 = f"select * from(\
                                    select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                    isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment\
                                     where Date between '{startdate}' and '{enddate}' and sentiment = '{sentiment}') as e\
                                    order by Date desc"
                # -- where Date = '{self.today}' \
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/facebook.png",
                            'Date': str(return_value[i][8])
                        }

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"

                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Bank PLC",
                                  "Post": f"No post with {sentiment} sentiment found between {startdate} and {enddate} on Facebook....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/facebook.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/neut.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(total_mentions) as counts from (select count(*) total_mentions from sa.Refreshedfacebookbanksentiment where Date between '{startdate}' and '{enddate}' union\
                                                                        select count(*) total_mentions from sa.Refreshedfacebookcommentsentiment where Date between '{startdate}' and '{enddate}') a"

                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) counts from (select count(sentiment) as sentiment from sa.Refreshedfacebookbanksentiment where Date between '{startdate}' and '{enddate}' union\
                           select count(sentiment) as sentiment from sa.Refreshedfacebookcommentsentiment where Sentiment = 'Positive' and Date between '{startdate}' and '{enddate}') as e"

                # print('query 3')
                self.cursor.execute(query3)
                return_value = self.cursor.fetchall()

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from sa.Refreshedfacebookcommentsentiment where Sentiment = 'Negative' and Date between '{startdate}' and '{enddate}'"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from sa.Refreshedfacebookcommentsentiment where Sentiment = 'Neutral' and Date between '{startdate}' and '{enddate}'"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                result['Post_data'] = post_data
                self.result = result
                self.close_database_connection()
        except Exception as e:
            print(str(e))

        return self.result

    def instagram_daterange_filter_by_sentiment(self, sentiment, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []
                if sentiment == 'Positive':
                    query1 = f"select * from(\
                                    select top 200 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Instagram_Post as post, Likes, \
                                    Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Date between '{startdate}' and '{enddate}' union all\
                                    select top 10 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                    isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where Date between '{startdate}' and '{enddate}' and comment_sentiment = 'positive'\
                                  ) e\
                                  order by Date desc"
                else:
                    query1 = f"select * from(\
                                        select top 200 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                        isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where Date between '{startdate}' and '{enddate}' and comment_sentiment = '{sentiment}'\
                                      ) e\
                                      order by Date desc"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/insta.png",
                                'Date': str(return_value[i][8])
                                }

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"

                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Instagram",
                                  'Username': "Sterling Bank PLC",
                                  "Post": f"No post with {sentiment} sentiment found between {startdate} and {enddate} on Instagram....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/insta.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                # print(post_data)
                query2 = f"select sum(total_mentions) as counts from (select count(*) total_mentions from sa.Refreshedinstagrambanksentiment where Date between '{startdate}' and '{enddate}' union\
                                                                        select count(*) total_mentions from sa.Refreshedinstagramcommentsentiment where Date between '{startdate}' and '{enddate}') a"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) counts from (select count(Instagram_Post) as sentiment from sa.Refreshedinstagrambanksentiment where Date between '{startdate}' and '{enddate}' union\
                            select count(comment_sentiment) as sentiment from sa.Refreshedinstagramcommentsentiment where Date between '{startdate}' and '{enddate}' \
                            and comment_sentiment = 'Positive') as e"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(comment_sentiment) as sentiment from sa.Refreshedinstagramcommentsentiment where comment_sentiment = 'Negative' and Date between '{startdate}' and '{enddate}'"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(comment_sentiment) as sentiment from sa.Refreshedinstagramcommentsentiment where comment_sentiment = 'Neutral' and Date between '{startdate}' and '{enddate}'"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                result['Post_data'] = post_data
                self.result = result
                self.close_database_connection()
        except Exception as e:
            print(str(e))

        return self.result

    def specta_daterange_filter_by_sentiment(self, sentiment, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                if sentiment == 'Positive':

                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%specta%' and Date between '{startdate}' and '{enddate}'  union all\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%specta%' and date between '{startdate}' and '{enddate}' and sentiment = 'Positive' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%specta%' and Date between '{startdate}' and '{enddate}' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%specta%' and Date between '{startdate}' and '{enddate}' and comment_sentiment = 'Positive' union all\
                                select top 100 isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                like '%specta%' and Date between '{startdate}' and '{enddate}' and sentiment = 'Positive'\
                                ) as e order by Date desc"
                else:
                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%specta%' and date between '{startdate}' and '{enddate}' and sentiment = '{sentiment}' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%specta%' and Date between '{startdate}' and '{enddate}' and comment_sentiment = '{sentiment}' union all\
                                select top 100 isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                like '%specta%' and Date between '{startdate}' and '{enddate}' and sentiment = '{sentiment}'\
                                ) as e order by Date desc"
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Bank PLC",
                                  "Post": f"No post with {sentiment} sentiment about Specta found between {startdate} and {enddate} on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                    # output = {"post": post_data}
                    # result = post_data

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%specta%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%specta%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%specta%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%specta%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                                like '%specta%' and Date between '{startdate}' and '{enddate}') as e union \
                                                select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where date between '{startdate}' and '{enddate}' and Instagram_Post like '%specta%') f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%specta%' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%specta%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%specta%' and comment_sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%specta%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}') as e union\
                            select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where date between '{startdate}' and '{enddate}' and Instagram_Post like '%specta%') f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%specta%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%specta%' and comment_sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%specta%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}') as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%specta%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%specta%' and comment_sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%specta%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}') as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query9 = f"select Hashtag, text, date from sa.Refreshedtwitterbanksentiment where text like '%specta%' and  Hashtag != 'None' and date between '{startdate}' and '{enddate}'"
                try:
                    self.cursor.execute(query9)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace(
                        "'", "")
                    result['Trending_Hashtag'] = trending_tag
                else:
                    result['Trending_Hashtag'] = f"No hashtags found between {startdate} and {enddate}"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def specta_daterange_filter_by_channel(self, platform, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                if platform == 'Facebook':
                    query1 = f"select * from(\
                                select top 200 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%specta%' and Date between '{startdate}' and '{enddate}'  union all\
                                select top 200 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%specta%' and date between '{startdate}' and '{enddate}'\
                                ) as e order by Date desc"
                elif platform == 'Instagram':
                    query1 = f"select * from(\
                                select top 200 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%specta%' and Date between '{startdate}' and '{enddate}' union all\
                                select top 200 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%specta%' and Date between '{startdate}' and '{enddate}'\
                                )as e order by Date desc"
                else:
                    query1 = f"select * from(\
                                select top 400 isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                like '%specta%' and Date between '{startdate}' and '{enddate}'\
                                ) as e order by Date desc"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:

                    if platform == 'Twitter':
                        url = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                    elif platform == 'Instagram':
                        url = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                    else:
                        url = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                    post_data = [{"Channel": f'{platform}',
                                  'Username': "Sterling Bank plc",
                                  "Post": f"No post about Specta on {platform} between {startdate} and {enddate}....",
                                  'Channel_logo': url,
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                # output = {"post": post_data}
                    # result = post_data

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%specta%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%specta%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%specta%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%specta%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                                like '%specta%' and Date between '{startdate}' and '{enddate}') as e union \
                                                select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where date between '{startdate}' and '{enddate}' and Instagram_Post like '%specta%') f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%specta%' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%specta%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%specta%' and comment_sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%specta%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}') as e union\
                            select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where date between '{startdate}' and '{enddate}' and Instagram_Post like '%specta%') f"

                # print('query 3')
                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%specta%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%specta%' and comment_sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%specta%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}') as e"

                # print('query 4')
                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%specta%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%specta%' and comment_sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%specta%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}') as e"

                # print('query 5')
                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query9 = f"select Hashtag, text, date from sa.Refreshedtwitterbanksentiment where text like '%specta%' and  Hashtag != 'None' and date between '{startdate}' and '{enddate}'"
                try:
                    self.cursor.execute(query9)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace(
                        "'", "")
                    result['Trending_Hashtag'] = trending_tag
                else:
                    result['Trending_Hashtag'] = f"No hashtags found between {startdate} and {enddate}"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def doubble_daterange_filter_by_sentiment(self, sentiment, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                if sentiment == 'Positive':

                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and Date between '{startdate}' and '{enddate}'  union all\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and date between '{startdate}' and '{enddate}' and sentiment = 'Positive' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%' and Date between '{startdate}' and '{enddate}' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and Date between '{startdate}' and '{enddate}' and comment_sentiment = 'Positive' union all\
                                select top 100 isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                like '%doubble%' and Date between '{startdate}' and '{enddate}' and sentiment ='Positive'\
                                ) as e order by Date desc"
                else:
                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and date between '{startdate}' and '{enddate}' and sentiment ='{sentiment}' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and Date between '{startdate}' and '{enddate}' and comment_sentiment ='{sentiment}' union all\
                                select top 100 isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                like '%doubble%' and Date between '{startdate}' and '{enddate}' and sentiment = '{sentiment}'\
                                ) as e order by Date desc"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Date': str(return_value[i][8])
                                }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Bank plc",
                                  "Post": f"No post with {sentiment} sentiment about Doubble found between {startdate} and {enddate} on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                    # output = {"post": post_data}
                    # result = post_data

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                                like '%doubble%' and Date between '{startdate}' and '{enddate}') as e union \
                                                select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%'and date between '{startdate}' and '{enddate}') f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%doubble%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}') as e union\
                            select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%' and date between '{startdate}' and '{enddate}') f"

                # print('query 3')
                self.cursor.execute(query3)
                return_value = self.cursor.fetchall()

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%doubble%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%doubble%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query9 = f"select Hashtag, text, date from sa.Refreshedtwitterbanksentiment where text like '%doubble%' and  Hashtag != 'None' and date between '{startdate}' and '{enddate}'"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def doubble_daterange_filter_by_channel(self, platform, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                if platform == 'Facebook':

                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and Date between '{startdate}' and '{enddate}'  union all\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and date between '{startdate}' and '{enddate}'\
                                ) as e order by Date desc"

                elif platform == 'Instagram':

                    query1 = f"select * from(\
                                    select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Instagram_Post as post, Likes, \
                                    Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%' and Date between '{startdate}' and '{enddate}' union all\
                                    select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                    isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and Date between '{startdate}' and '{enddate}'\
                                    ) as e order by Date desc"
                else:

                    query1 = f"select * from(\
                                    select top 100 isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                    retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                    like '%doubble%' and Date between '{startdate}' and '{enddate}'\
                                    ) as e order by Date desc"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Date': str(return_value[i][8])
                                }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    if platform == 'Twitter':
                        url = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                    elif platform == 'Instagram':
                        url = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                    else:
                        url = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                    post_data = [{"Channel": f'{platform}',
                                  'Username': "Sterling Bank plc",
                                  "Post": f"No post about Doubble on {platform} between {startdate} and {enddate}....",
                                  'Channel_logo': url,
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                    # output = {"post": post_data}
                    # result = post_data

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                                like '%doubble%' and Date between '{startdate}' and '{enddate}') as e union \
                                                select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%'and date between '{startdate}' and '{enddate}') f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%doubble%' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%doubble%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}') as e union\
                            select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%doubble%' and date between '{startdate}' and '{enddate}') f"

                # print('query 3')
                self.cursor.execute(query3)
                return_value = self.cursor.fetchall()

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%doubble%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%doubble%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%doubble%' and comment_sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%doubble%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query9 = f"select Hashtag, text, date from sa.Refreshedtwitterbanksentiment where text like '%doubble%' and  Hashtag != 'None' and date between '{startdate}' and '{enddate}'"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def onebank_daterange_filter_by_sentiment(self, sentiment, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                if sentiment == 'Positive':

                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%onebank%' and Date between '{startdate}' and '{enddate}'  union all\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onebank%' and date between '{startdate}' and '{enddate}' and sentiment = 'Positive' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%onebank%' and Date between '{startdate}' and '{enddate}' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onebank%' and Date between '{startdate}' and '{enddate}' and comment_sentiment = 'Positive' union all\
                                select top 100 isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                like '%onebank%' and Date between '{startdate}' and '{enddate}' and sentiment = 'Positive'\
                                ) as e order by Date desc"
                else:
                    query1 = f"select * from(\
                                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onebank%' and date between '{startdate}' and '{enddate}' and sentiment = '{sentiment}' union all\
                                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onebank%' and Date between '{startdate}' and '{enddate}' and comment_sentiment = '{sentiment}' union all\
                                                select top 100 isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                                like '%onebank%' and Date between '{startdate}' and '{enddate}' and sentiment = '{sentiment}'\
                                                ) as e order by Date desc"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Date': str(return_value[i][8])
                                }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Bank plc",
                                  "Post": f"No post with {sentiment} sentiment found for doubble between {startdate} and {enddate} on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                    # output = {"post": post_data}
                    # result = post_data

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%onebank%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onebank%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onebank%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                                like '%onebank%' and Date between '{startdate}' and '{enddate}') as e union \
                                                select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%onebank%'and date between '{startdate}' and '{enddate}') f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Negative') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%onebank%' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onebank%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onebank%' and comment_sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%onebank%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}') as e union\
                            select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%onebank%' and date between '{startdate}' and '{enddate}') f"

                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onebank%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onebank%' and comment_sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%onebank%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onebank%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onebank%' and comment_sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%onebank%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query9 = f"select Hashtag, text, date from sa.Refreshedtwitterbanksentiment where text like '%onebank%' and  Hashtag != 'None' and date between '{startdate}' and '{enddate}'"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def onebank_daterange_filter_by_channel(self, platform, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                if platform == 'Facebook':

                    query1 = f"select * from(\
                                select top 200 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%onebank%' and Date between '{startdate}' and '{enddate}'  union all\
                                select top 200 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onebank%' and date between '{startdate}' and '{enddate}'\
                                ) as e order by Date desc"
                elif platform == 'Instagram':

                    query1 = f"select * from(\
                                    select top 200 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Instagram_Post as post, Likes, \
                                    Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%onebank%' and Date between '{startdate}' and '{enddate}' union all\
                                    select top 200 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                    isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onebank%' and Date between '{startdate}' and '{enddate}'\
                                    ) as e order by Date desc"

                else:
                    query1 = f"select * from(\
                                        select top 200 isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                        retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                        like '%onebank%' and Date between '{startdate}' and '{enddate}'\
                                        ) as e order by Date desc"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []
                # print(return_value)

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                                'Channel': str(return_value[i][0]),
                                'Username': str(return_value[i][1]),
                                'Post': str(return_value[i][2]),
                                'Likes': str(return_value[i][3]),
                                'Comments': str(return_value[i][4]),
                                'Shares': str(return_value[i][5]),
                                'Post_url': str(return_value[i][6]),
                                'Sentiment': str(return_value[i][7]),
                                'Date': str(return_value[i][8])
                                }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    if platform == 'Twitter':
                        url = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                    elif platform == 'Instagram':
                        url = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                    else:
                        url = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                    post_data = [{"Channel": f'{platform}',
                                  'Username': "Sterling Bank plc",
                                  "Post": f"No post about Onebank on {platform} between {startdate} and {enddate}....",
                                  'Channel_logo': url,
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%onebank%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onebank%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onebank%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                                like '%onebank%' and Date between '{startdate}' and '{enddate}') as e union \
                                                select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%onebank%'and date between '{startdate}' and '{enddate}') f"
                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive', 'Negative') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%onebank%' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onebank%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onebank%' and comment_sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%onebank%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}') as e union\
                            select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%onebank%' and date between '{startdate}' and '{enddate}') f"

                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onebank%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onebank%' and comment_sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%onebank%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onebank%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onebank%' and comment_sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%onebank%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query9 = f"select Hashtag, text, date from sa.Refreshedtwitterbanksentiment where text like '%onebank%' and  Hashtag != 'None' and date between '{startdate}' and '{enddate}'"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace("'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def onepay_daterange_filter_by_sentiment(self, sentiment, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                if sentiment == 'Positive':

                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%onepay%' and Date between '{startdate}' and '{enddate}'  union all\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onepay%' and date between '{startdate}' and '{enddate}' and sentiment = 'Positive' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%onepay%' and Date between '{startdate}' and '{enddate}' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onepay%' and Date between '{startdate}' and '{enddate}' and comment_sentiment = 'Positive' union all\
                                select top 100 isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                like '%onepay%' and Date between '{startdate}' and '{enddate}' and sentiment = 'Positive'\
                                ) as e order by Date desc"
                else:
                    query1 = f"select * from(\
                                    select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                    isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onepay%' and date between '{startdate}' and '{enddate}' and sentiment = '{sentiment}' union all\
                                    select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Instagram_Post as post, Likes, \
                                    Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%onepay%' and Date between '{startdate}' and '{enddate}' union all\
                                    select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                    isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onepay%' and Date between '{startdate}' and '{enddate}' and comment_sentiment = '{sentiment}' union all\
                                    select top 100 isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                    retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                    like '%onepay%' and Date between '{startdate}' and '{enddate}' and sentiment = '{sentiment}'\
                                    ) as e order by Date desc"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Bank plc",
                                  "Post": f"No post with {sentiment} sentiment found about onepay between {startdate} and {enddate} on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                    # output = {"post": post_data}
                    # result = post_data

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%onepay%' and Date between '{startdate}' and '{enddate}' union all\
                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onepay%' and Date between '{startdate}' and '{enddate}' union all\
                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onepay%' and Date between '{startdate}' and '{enddate}' union all\
                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                like '%onepay%' and Date between '{startdate}' and '{enddate}') as e union \
                                select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%onepay%'and date between '{startdate}' and '{enddate}') f"

                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive','Negative') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%onepay%' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onepay%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onepay%' and comment_sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%onepay%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}') as e union\
                            select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%onepay%' and date between '{startdate}' and '{enddate}') f"

                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onepay%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onepay%' and comment_sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%onepay%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onepay%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onepay%' and comment_sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%onepay%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = 0

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query9 = f"select Hashtag, text, date from sa.Refreshedtwitterbanksentiment where text like '%onepay%' and  Hashtag != 'None' and date between '{startdate}' and '{enddate}'"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace(
                        "'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def onepay_daterange_filter_by_channel(self, platform, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                if platform == 'Facebook':

                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%onepay%' and Date between '{startdate}' and '{enddate}'  union all\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onepay%' and date between '{startdate}' and '{enddate}'\
                                ) as e order by Date desc"

                elif platform == 'Instagram':
                    query1 = f"select * from(\
                                    select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Instagram_Post as post, Likes, \
                                    Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%onepay%' and Date between '{startdate}' and '{enddate}' union all\
                                    select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                    isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onepay%' and Date between '{startdate}' and '{enddate}'\
                                    ) as e order by Date desc"
                else:
                    query1 = f"select * from(\
                                    select top 100 isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                        retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                        like '%onepay%' and Date between '{startdate}' and '{enddate}'\
                                        ) as e order by Date desc"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    if platform == 'Twitter':
                        url = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                    elif platform == 'Instagram':
                        url = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                    else:
                        url = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                    post_data = [{"Channel": f'{platform}',
                                  'Username': "Sterling Bank PLC",
                                  "Post": f"No post about onepay so far on {platform} today....",
                                  'Channel_logo': url,
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%onepay%' and Date between '{startdate}' and '{enddate}' union all\
                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onepay%' and Date between '{startdate}' and '{enddate}' union all\
                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onepay%' and Date between '{startdate}' and '{enddate}' union all\
                                select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                                like '%onepay%' and Date between '{startdate}' and '{enddate}') as e union \
                                select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%onepay%'and date between '{startdate}' and '{enddate}') f"

                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                            comments,Shares, Post_url,isnull('Positive','Negative') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%onepay%' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onepay%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onepay%' and comment_sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%onepay%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}') as e union\
                            select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%onepay%' and date between '{startdate}' and '{enddate}') f"

                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onepay%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onepay%' and comment_sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%onepay%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%onepay%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%onepay%' and comment_sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                            select isnull('Twitter','Twitter') as Channel, Username as username, tweet_text as post, favorited_count as Likes, isnull(0,0) comments,\
                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment2 where tweet_text \
                            like '%onepay%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = 0

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query9 = f"select Hashtag, text, date from sa.Refreshedtwitterbanksentiment where text like '%onepay%' and  Hashtag != 'None' and date between '{startdate}' and '{enddate}'"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace(
                        "'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def i_invest_daterange_filter_by_sentiment(self, sentiment, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                if sentiment == 'Positive':

                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%i-invest%' and Date between '{startdate}' and '{enddate}'  union all\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%i-invest%' and date between '{startdate}' and '{enddate}' and sentiment = 'Positive' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%i-invest%' and Date between '{startdate}' and '{enddate}' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%i-invest%' and Date between '{startdate}' and '{enddate}' and comment_sentiment = 'Positive' union all\
                                select top 100 isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                                like '%i-invest%' and Date between '{startdate}' and '{enddate}' and sentiment = 'Positive') as e order by Date desc"
                else:
                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0)as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%i-invest%' and date between '{startdate}' and '{enddate}' and sentiment = '{sentiment}' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%i-invest%' and Date between '{startdate}' and '{enddate}' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%i-invest%' and Date between '{startdate}' and '{enddate}' and comment_sentiment = '{sentiment}' union all\
                                select top 100 isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                                like '%i-invest%' and Date between '{startdate}' and '{enddate}' and sentiment = '{sentiment}') as e order by Date desc"
                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    post_data = [{"Channel": "Twitter",
                                  'Username': "Sterling Bank plc",
                                  "Post": f"No post with {sentiment} sentiment found about I-invest between {startdate} and {enddate} on all social platforms....",
                                  'Channel_logo': "https://azermstorage.blob.core.windows.net/appimages/favicon.png",
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%i-invest%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%i-invest%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%i-invest%' and Date between '{startdate}' and '{enddate}' union all\
                                                select isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                                                like '%i-invest%' and Date between '{startdate}' and '{enddate}') as e union \
                                                select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%i-invest%'and date between '{startdate}' and '{enddate}') f"

                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%i-invest%' and date between '{startdate}' and '{enddate}' union all\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%i-invest%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%i-invest%' and comment_sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                                            select top 100 isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                                            like '%i-invest%' and Date between '{startdate}' and '{enddate}' and Sentiment = 'Positive') as e union\
                                            select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%iinvest%'and date between '{startdate}' and '{enddate}') f"

                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%i-invest%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%i-invest%' and comment_sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                                            select top 100 isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text\
                                            like '%i-invest%' and Sentiment = 'Negative' and Date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%i-invest%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%i-invest%' and comment_sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                                            select top 100 isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text\
                                            like '%i-invest%' and Sentiment = 'Neutral' and Date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query9 = f"select Hashtag, text, date from sa.Refreshedtwitterbanksentiment where text like '%i-invest%' and  Hashtag != 'None' and date between '{startdate}' and '{enddate}'"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace(
                        "'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result

    def i_invest_daterange_filter_by_channel(self, platform, startdate, enddate):
        try:
            if self.connection:
                result = {}
                post_data = []

                if platform == 'Facebook':

                    query1 = f"select * from(\
                                select top 100 isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                comments,Shares, Post_url, isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%i-invest%' and Date between '{startdate}' and '{enddate}'  union all\
                                select top 100 isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%i-invest%' and date between '{startdate}' and '{enddate}'\
                                ) as e order by Date desc"

                elif platform == 'Instagram':
                    query1 = f"select * from(\
                                select top 100 isnull('Instagram','Instagram') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc'), Instagram_Post as post, Likes, \
                                Comments, isnull(0,0) as Shares, Post_url,isnull('Positive', 'Positive') as Sentiment, Date from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%i-invest%' and Date between '{startdate}' and '{enddate}' union all\
                                select top 100 isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%i-invest%' and Date between '{startdate}' and '{enddate}'\
                                ) as e order by Date desc"

                else:
                    query1 = f"select * from(\
                                    select top 200 isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                    retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text\
                                    like '%i-invest%' and Date between '{startdate}' and '{enddate}'\
                                ) as e order by Date desc"

                try:
                    self.cursor.execute(query1)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        data = {
                            'Channel': str(return_value[i][0]),
                            'Username': str(return_value[i][1]),
                            'Post': str(return_value[i][2]),
                            'Likes': str(return_value[i][3]),
                            'Comments': str(return_value[i][4]),
                            'Shares': str(return_value[i][5]),
                            'Post_url': str(return_value[i][6]),
                            'Sentiment': str(return_value[i][7]),
                            'Date': str(return_value[i][8])
                        }

                        if data['Channel'] == 'Twitter':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                        elif data['Channel'] == 'Instagram':
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                        else:
                            data['Channel_logo'] = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                        if str(return_value[i][7]) == "Positive":
                            data["drop_down"] = ["Negative", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/pos.jpg"
                        elif str(return_value[i][7]) == "Negative":
                            data["drop_down"] = ["Positive", "Neutral"]
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"
                        else:
                            data["drop_down"] = ["Positive", "Negative"]
                            data["Sentiment_emojie"] = "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"
                            data["drop_down_emojie"] = ["https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                                        "https://azermstorage.blob.core.windows.net/appimages/neg.jpg"]

                        post_data.append(data)
                else:
                    if platform == 'Twitter':
                        url = "https://azermstorage.blob.core.windows.net/appimages/twitter.png"
                    elif platform == 'Instagram':
                        url = "https://azermstorage.blob.core.windows.net/appimages/insta.png"
                    else:
                        url = "https://azermstorage.blob.core.windows.net/appimages/facebook.png"

                    post_data = [{"Channel": f'{platform}',
                                  'Username': "Sterling Bank PLC",
                                  "Post": f"No post about I-invest on {platform} between {startdate} and {enddate}....",
                                  'Channel_logo': url,
                                  'Sentiment': "Positive",
                                  'drop_down_emojie': ["https://azermstorage.blob.core.windows.net/appimages/neg.jpg",
                                                       "https://azermstorage.blob.core.windows.net/appimages/neut.jpg"],
                                  'Sentiment_emojie': "https://azermstorage.blob.core.windows.net/appimages/pos.jpg",
                                  'drop_down': ["Negative", "Neutral"]}]

                    # output = {"post": post_data}
                    # result = post_data

                query2 = f"select sum(sentiment) sentiment from (select count(*) sentiment from(\
                                                                select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                                comments,Shares, Post_url,sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%i-invest%' and Date between '{startdate}' and '{enddate}' union all\
                                                                select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%i-invest%' and Date between '{startdate}' and '{enddate}' union all\
                                                                select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                                isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%i-invest%' and Date between '{startdate}' and '{enddate}' union all\
                                                                select isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                                                retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                                                                like '%i-invest%' and Date between '{startdate}' and '{enddate}') as e union \
                                                                select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%i-invest%'and date between '{startdate}' and '{enddate}') f"

                try:
                    self.cursor.execute(query2)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['total_mentions'] = return_value[i][0]
                else:
                    result['total_mentions'] = 0

                query3 = f"select sum(sentiment) sentiment from (select count(sentiment) as sentiment from(\
                                                            select isnull('Facebook','Facebook') as Channel, isnull('Sterling Bank Plc','Sterling Bank Plc') as username, Text as post, Likes, \
                                                            comments,Shares, Post_url,isnull('Positive', 'Positive') as sentiment, Date from sa.Refreshedfacebookbanksentiment where Text like '%i-invest%' and date between '{startdate}' and '{enddate}' union all\
                                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%i-invest%' and Sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%i-invest%' and comment_sentiment = 'Positive' and date between '{startdate}' and '{enddate}' union all\
                                                            select top 100 isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text \
                                                            like '%i-invest%' and Date between '{startdate}' and '{enddate}' and Sentiment = 'Positive') as e union\
                                                            select count(*) as sentiment from sa.Refreshedinstagrambanksentiment where Instagram_Post like '%iinvest%'and date between '{startdate}' and '{enddate}') f"

                try:
                    self.cursor.execute(query3)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Positive_count'] = return_value[i][0]
                else:
                    result['Positive_count'] = 0

                query4 = f"select count(sentiment) as sentiment from(\
                                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%i-invest%' and Sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%i-invest%' and comment_sentiment = 'Negative' and date between '{startdate}' and '{enddate}' union all\
                                                            select top 100 isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text\
                                                            like '%i-invest%' and Sentiment = 'Negative' and Date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query4)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Negative_count'] = return_value[i][0]
                else:
                    result['Negative_count'] = 0

                query5 = f"select count(sentiment) as sentiment from(\
                                                            select isnull('Facebook','Facebook') as Channel, source as username, text as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0)as Shares, source_url as Post_url,Sentiment as sentiment, date as Date from sa.Refreshedfacebookcommentsentiment where text like '%i-invest%' and Sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                                                            select isnull('Instagram','Instagram') as Channel, user_name as username, user_comment as post, isnull(0,0) as Likes, isnull(0,0) as comments,\
                                                            isnull(0,0) as Shares, post_url as Post_url,comment_sentiment as Sentiment, Date from sa.Refreshedinstagramcommentsentiment where user_comment like '%i-invest%' and comment_sentiment = 'Neutral' and date between '{startdate}' and '{enddate}' union all\
                                                            select top 100 isnull('Twitter','Twitter') as Channel, user_name as username, text as post, tweet_likes as Likes, isnull(0,0) comments,\
                                                            retweet_count as Shares, Post_url,sentiment, Date from sa.Refreshedtwitterbanksentiment where text\
                                                            like '%i-invest%' and Sentiment = 'Neutral' and Date between '{startdate}' and '{enddate}') as e"

                try:
                    self.cursor.execute(query5)
                    return_value = self.cursor.fetchall()
                except Exception as e:
                    print(str(e))
                    return_value = []

                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        result['Neutral_count'] = return_value[i][0]
                else:
                    result['Neutral_count'] = 0

                query9 = f"select Hashtag, text, date from sa.Refreshedtwitterbanksentiment where text like '%i-invest%' and  Hashtag != 'None' and date between '{startdate}' and '{enddate}'"
                try:
                    self.cursor.execute(query9)
                except Exception as e:
                    print(str(e))

                return_value = self.cursor.fetchall()
                # print(f"return_hashtag_value: {return_value}")
                # return_value = [(29, 'Neutral')]

                trending_hashtag = []
                trending_tag = None
                if len(return_value) > 0:
                    for i in range(len(return_value)):
                        trending_hashtag.append(return_value[i][0])

                    tag = []
                    for i in trending_hashtag:
                        hash = i.split(',')
                        for j in range(len(hash)):
                            tag.append(hash[j].strip())

                    trending_tag = str(Counter(tag)).split('(')[1].split(')')[0].split('{')[1].split('}')[0].replace(
                        "'", "")
                    result['Trending_Hashtag'] = trending_tag

                else:
                    result['Trending_Hashtag'] = "No hashtags so far"

                # print(f"hashtags:{trending_tag}")

                # result['Trending_Hashtag'] = trending_tag
                result['Post_data'] = post_data

                self.result = result

                self.close_database_connection()
            else:
                print('database not connected')
        except Exception as e:
            print(str(e))
            self.close_database_connection()
            self.result = {'error': str(e)}

        return self.result
